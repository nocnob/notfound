{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/graphql-java-schema/","result":{"data":{"asciidoc":{"id":"25d05b0b-2716-53b1-a785-c9f61e2b858c","html":"<div class=\"sect1\">\n<h2 id=\"_graphql_java_以及_spring_boot_schema\"><a class=\"anchor\" href=\"#_graphql_java_以及_spring_boot_schema\"></a>GraphQL Java 以及 Spring Boot: Schema</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>OpenJDK 11</p>\n</li>\n<li>\n<p>Gradle 6.8</p>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_依赖\"><a class=\"anchor\" href=\"#_依赖\"></a>依赖</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">implementation 'com.graphql-java:graphql-java:16.2' // 新\nimplementation 'com.graphql-java:graphql-java-spring-boot-starter-webmvc:2.0' // 新\nimplementation 'com.google.guava:guava:30.1.1-jre' // 新(可选)\n\nimplementation 'org.springframework.boot:spring-boot-starter-web'\ntestImplementation 'org.springframework.boot:spring-boot-starter-test'</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_graphql_dsl\"><a class=\"anchor\" href=\"#_graphql_dsl\"></a>graphql dsl</h3>\n<div class=\"paragraph\">\n<p>创建 <code>src/main/resources/starWarsSchema.graphqls</code> :</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-graphql\" data-lang=\"graphql\">schema {\n    query: Query\n}\n\ntype Query {\n    hero(episode: Episode) : Character\n    human(id: String) : Human\n    droid(id: ID!): Droid\n}\n\nenum Episode {\n    NEWHOPE\n    EMPIRE\n    JEDI\n}\n\ninterface Character {\n    id: ID!\n    name: String!\n    friends: [Character]\n    appearsIn: [Episode]!\n}\n\ntype Human implements Character {\n    id: ID!\n    name: String!\n    friends: [Character]\n    appearsIn: [Episode]!\n    homePlanet: String\n}\n\ntype Droid implements Character {\n    id: ID!\n    name: String!\n    friends: [Character]\n    appearsIn: [Episode]!\n    primaryFunction: String\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>其中包括了 <code>enum</code> 和 <code>interface</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_与_graphql_dsl_对应的_java_类型\"><a class=\"anchor\" href=\"#_与_graphql_dsl_对应的_java_类型\"></a>与 graphQL dsl 对应的 Java 类型</h3>\n<div class=\"sect3\">\n<h4 id=\"_enum_episode\"><a class=\"anchor\" href=\"#_enum_episode\"></a>enum Episode</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public enum Episode {\n    NEWHOPE,\n    EMPIRE,\n    JEDI,\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_interface_character\"><a class=\"anchor\" href=\"#_interface_character\"></a>interface Character</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public interface Character {\n    String getId();\n    String getName();\n    List&lt;String&gt; getFriends();\n    List&lt;Episode&gt; getAppearsIn();\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_type_human\"><a class=\"anchor\" href=\"#_type_human\"></a>type Human</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class Human implements Character{\n    private String id;\n    private String name;\n    private List&lt;String&gt; friends;\n    private List&lt;Episode&gt; appearsIn;\n    private String homePlanet;\n\n    // 省略 construct 和 getter\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_type_droid\"><a class=\"anchor\" href=\"#_type_droid\"></a>type Droid</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class Droid implements Character {\n    private String id;\n    private String name;\n    private List&lt;String&gt; friends;\n    private List&lt;Episode&gt; appearsIn;\n    private String primaryFunction;\n\n    // 省略 construct 和 getter\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_graphql_dsl_与_java_类型建立联系\"><a class=\"anchor\" href=\"#_graphql_dsl_与_java_类型建立联系\"></a>graphql dsl 与 java 类型建立联系</h3>\n<div class=\"sect3\">\n<h4 id=\"_graphqlprovider\"><a class=\"anchor\" href=\"#_graphqlprovider\"></a>GraphQLProvider</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\npublic class GraphQLProvider {\n    private GraphQL graphQL;\n    private StarWarsWiring starWarsWiring;\n\n    @Autowired\n    public GraphQLProvider(StarWarsWiring starWarsWiring) {\n        this.starWarsWiring = starWarsWiring;\n    }\n\n    @PostConstruct\n    public void init() throws IOException {\n        URL url = Resources.getResource(\"starWarsSchemaAnnotated.graphqls\");\n        String sdl = Resources.toString(url, Charsets.UTF_8);\n        GraphQLSchema graphQLSchema = buildSchema(sdl);\n\n        this.graphQL = GraphQL.newGraphQL(graphQLSchema).build();\n    }\n\n    private GraphQLSchema buildSchema(String sdl) {\n        TypeDefinitionRegistry typeRegistry = new SchemaParser().parse(sdl);\n        RuntimeWiring runtimeWiring = buildWiring();\n        SchemaGenerator schemaGenerator = new SchemaGenerator();\n        // TypeRegistry 与 RuntimeWiring 共同构建 GraphQLSchema\n        return schemaGenerator.makeExecutableSchema(typeRegistry, runtimeWiring);\n    }\n\n    private RuntimeWiring buildWiring() {\n        return RuntimeWiring.newRuntimeWiring()\n            .type(newTypeWiring(\"Query\")\n                  .dataFetcher(\"hero\", starWarsWiring.heroDataFetcher)\n                  .dataFetcher(\"human\", starWarsWiring.humanDataFetcher)\n                  .dataFetcher(\"droid\", starWarsWiring.droidDataFetcher))\n            .type(newTypeWiring(\"Human\")\n                  // 默认使用 PropertyDataFetcher，如 id, name。 JavaBean 会调用 getter 方法\n                  // graphql-java 提供一些 Scalar，如 String, Int, Boolean 等，所以这些基本类型自动处理\n                  .dataFetcher(\"friends\", starWarsWiring.friendsDataFetcher))\n            .type(newTypeWiring(\"Droid\")\n                  .dataFetcher(\"friends\", starWarsWiring.friendsDataFetcher))\n            // interface 类型，需要 TypeResolver 决定值的真实类型\n            .type(newTypeWiring(\"Character\")\n                  .typeResolver(starWarsWiring.characterTypeResolver))\n            // enum 类型\n            .type(newTypeWiring(\"Episode\")\n                  .enumValues(starWarsWiring.episodeResolver))\n            .build();\n    }\n\n    @Bean\n    public GraphQL graphQL() {\n        return graphQL;\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>GraphQL <code>interface</code> 需要定义 <code>TypeResolver</code> ，用于运行时判断值的具体类型</p>\n</li>\n<li>\n<p>GraphQL <code>enum</code> 需要 <code>EnumValuesProvider</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_data_fetcher\"><a class=\"anchor\" href=\"#_data_fetcher\"></a>data fetcher</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\npublic class StarWarsWiring {\n    DataFetcher&lt;Human&gt; humanDataFetcher = environment -&gt; {\n        // 获取用户参数\n        String id = environment.getArgument(\"id\");\n        return StarWarsData.humanData.get(id);\n    };\n\n    DataFetcher&lt;Droid&gt; droidDataFetcher = environment -&gt; {\n        String id = environment.getArgument(\"id\");\n        return StarWarsData.droidData.get(id);\n    };\n\n    DataFetcher&lt;Character&gt; heroDataFetcher = environment -&gt; {\n        return StarWarsData.getCharacterData(\"1002\");\n    };\n\n    DataFetcher&lt;List&lt;Character&gt;&gt; friendsDataFetcher = environment -&gt; {\n        // 获取父节点的值\n        Character character = environment.getSource();\n        List&lt;String&gt; friendIds = character.getFriends();\n        return friendIds.stream()\n        .map(StarWarsData::getCharacterData) // N+1\n        .collect(Collectors.toList());\n    };\n\n    // enum\n    EnumValuesProvider episodeResolver = Episode::valueOf;\n\n    // interface\n    TypeResolver characterTypeResolver = env -&gt; {\n        // 需要解析 GraphQL 类型的对象\n        Character character = env.getObject();\n        if (character instanceof Human) {\n            return (GraphQLObjectType) env.getSchema().getType(\"Human\");\n        } else {\n            return (GraphQLObjectType) env.getSchema().getType(\"Droid\");\n        }\n    };\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>默认使用 <code>PropertyDataFetcher</code> ，基本类型的 data fetcher</p>\n</li>\n<li>\n<p><code>friendsDataFetcher</code> 存在 N+1 问题</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_data\"><a class=\"anchor\" href=\"#_data\"></a>data</h4>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class StarWarsData {\n    static Human luke = new Human(\n            \"1000\",\n            \"Luke Skywalker\",\n            asList(\"1001\", \"1002\", \"2000\", \"2001\"),\n            asList(Episode.NEWHOPE, Episode.EMPIRE, Episode.JEDI),\n            \"Tatooine\"\n    );\n\n    static Human vader = new Human(\n            \"1001\",\n            \"Darth Vader\",\n            asList(\"1000\"),\n            asList(Episode.NEWHOPE, Episode.EMPIRE, Episode.JEDI),\n            \"Tatooine\"\n    );\n\n    static Human han = new Human(\n            \"1002\",\n            \"Han Solo\",\n            asList(\"1000\", \"2001\"),\n            asList(Episode.NEWHOPE, Episode.EMPIRE, Episode.JEDI),\n            null);\n\n\n    public static Map&lt;String, Human&gt; humanData = new LinkedHashMap&lt;&gt;();\n\n    static {\n        humanData.put(\"1000\", luke);\n        humanData.put(\"1001\", vader);\n        humanData.put(\"1002\", han);\n    }\n\n    static Droid threepio = new Droid(\n            \"2000\",\n            \"C-3PO\",\n            asList(\"1000\", \"1002\", \"2001\"),\n            asList(Episode.NEWHOPE, Episode.EMPIRE, Episode.JEDI),\n            \"Protocol\"\n    );\n\n    static Droid artoo = new Droid(\n            \"2001\",\n            \"R2-D2\",\n            asList(\"1000\", \"1002\"),\n            asList(Episode.NEWHOPE, Episode.EMPIRE, Episode.JEDI),\n            \"Astromech\"\n    );\n\n    public static Map&lt;String, Droid&gt; droidData = new LinkedHashMap&lt;&gt;();\n\n    static {\n        droidData.put(\"2000\", threepio);\n        droidData.put(\"2001\", artoo);\n    }\n\n    public static Character getCharacterData(String id) {\n        if (humanData.get(id) != null) {\n            return humanData.get(id);\n        } else if (droidData.get(id) != null) {\n            return droidData.get(id);\n        }\n        return null;\n    }\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_参考\"><a class=\"anchor\" href=\"#_参考\"></a>参考</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>源码来自 <a href=\"https://github.com/graphql-java/graphql-java-examples\" class=\"bare\">https://github.com/graphql-java/graphql-java-examples</a> 有改动</p>\n</li>\n<li>\n<p><a href=\"https://www.graphql-java.com/documentation/v16/schema/\" class=\"bare\">https://www.graphql-java.com/documentation/v16/schema/</a></p>\n</li>\n<li>\n<p><a href=\"https://www.graphql-java.com/documentation/v16/data-fetching/\" class=\"bare\">https://www.graphql-java.com/documentation/v16/data-fetching/</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","document":{"title":"GraphQL Java 以及 Spring Boot: Schema"},"pageAttributes":{"slug":"graphql-java-schema","category":"graphql"},"revision":{"date":"2021-03-27","number":"1.0"}}},"pageContext":{"id":"25d05b0b-2716-53b1-a785-c9f61e2b858c","pageAttributes__slug":"graphql-java-schema","__params":{"pageAttributes__slug":"graphql-java-schema"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}