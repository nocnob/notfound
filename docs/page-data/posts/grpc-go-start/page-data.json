{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/grpc-go-start/","result":{"data":{"asciidoc":{"id":"98c6ee92-820e-5e62-b10e-a6ab3837a53a","html":"<div class=\"sect1\">\n<h2 id=\"_准备\">准备</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>protoc 安装：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"># 下载\nPB_REL=\"https://github.com/protocolbuffers/protobuf/releases\"\ncurl -LO $PB_REL/download/v3.15.8/protoc-3.15.8-linux-x86_64.zip\n# 解压\nunzip protoc-3.15.8-linux-x86_64.zip -d $HOME/.local\n# 设置环境变量\nexport PATH=\"$PATH:$HOME/.local/bin\"\n# 检查 protoc 版本\nprotoc --version</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>protoc go 插件：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2\n\nexport PATH=\"$PATH:$(go env GOPATH)/bin\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>初始化目录：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git init grpc-examples\ncd grpc-examples\nmkdir -p proto/echo\nmkdir -p cmd/echo/client\nmkdir -p cmd/echo/server\n\ngo mod init grpc.examples\ngo get -u google.golang.org/grpc</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>创建 proto 文件, 文件中包含了四种不同的 RPC 模式：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">proto/echo/echo.proto</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-protobuf\" data-lang=\"protobuf\">syntax = \"proto3\";\n\noption go_package = \"grpc.examples/proto/echo\";\n\npackage examples;\n\n// EchoRequest is the request for echo.\nmessage EchoRequest {\n  string message = 1;\n}\n\n// EchoResponse is the response for echo.\nmessage EchoResponse {\n  string message = 1;\n}\n\n// Echo is the echo service.\nservice Echo {\n  // UnaryEcho is unary echo.\n  rpc UnaryEcho(EchoRequest) returns (EchoResponse) {}\n  // ServerStreamingEcho is server side streaming.\n  rpc ServerStreamingEcho(EchoRequest) returns (stream EchoResponse) {}\n  // ClientStreamingEcho is client side streaming.\n  rpc ClientStreamingEcho(stream EchoRequest) returns (EchoResponse) {}\n  // BidirectionalStreamingEcho is bidi streaming.\n  rpc BidirectionalStreamingEcho(stream EchoRequest) returns (stream EchoResponse) {}\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>生成 PB 文件：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">protoc \\\n    --go_out=proto \\\n    --go_opt=paths=source_relative \\\n    --go-grpc_out=proto \\\n    --go-grpc_opt=paths=source_relative \\\n    -I proto \\\n    proto/echo/echo.proto</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>--go_out</code> 生成 go 源文件目录</p>\n</li>\n<li>\n<p><code>--go-grpc_out</code> 生成 go grpc 源文件目录</p>\n</li>\n<li>\n<p><code>-I</code> 导入时使用的查询路径</p>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_问题\">问题</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>当第三方的 proto 文件未使用 <code>option go_package</code> 会报错：</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-text\" data-lang=\"text\">protoc-gen-go: unable to determine Go import path for \"raftpb/raft.proto\"\n\nPlease specify either:\n        • a \"go_package\" option in the .proto source file, or\n        • a \"M\" argument on the command line.</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>需要在命令行中使用 <code>M</code> 参数：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Makefile</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-makefile\" data-lang=\"makefile\">OPTS :=         Mraftrpc/raftrpc.proto=raft.example/proto/raftrpc\nOPTS := ${OPTS},Mraftpb/raft.proto=go.etcd.io/raft/v3/raftpb <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\ngogopb := $(shell go list -m -f '{{.Dir}}' github.com/gogo/protobuf) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\nraftpb := $(shell go list -m -f '{{.Dir}}' go.etcd.io/raft/v3)\n\n.PHONY: proto\nproto:\n\tprotoc \\\n\t\t--proto_path=proto \\\n\t\t--proto_path=${gogopb} \\\n\t\t--proto_path=${raftpb} \\\n\t\t--go_opt=paths=source_relative \\\n\t\t--go_out=${OPTS}:proto \\\n\t\t--go-grpc_opt=paths=source_relative \\\n\t\t--go-grpc_out=${OPTS}:proto \\\n\t\traftrpc/raftrpc.proto <i class=\"conum\" data-value=\"3\"></i><b>(3)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>M 参数 <code>M${PROTO_FILE}=${GO_IMPORT_PATH}</code>；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>引入的包文件路径；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>通过 <code>--go_out</code> 和 <code>--go-grpc_out</code> 传入 M 参数。</td>\n</tr>\n</table>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_grpc\">gRPC</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_main\">main</h3>\n<div class=\"sect3\">\n<h4 id=\"_客户端\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">package main\n\nimport (\n\t// ...\n\tpb \"grpc.examples/proto/echo\"\n)\n\nvar addr = flag.String(\"addr\", \"localhost:50051\", \"the address to connect to\")\n\nconst (\n\tmessage        = \"this is examples\"\n\tstreamingCount = 10\n)\n\nfunc main() {\n\tflag.Parse()\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tctx := context.Background()\n\tc := pb.NewEchoClient(conn)\n\n\tunaryCall(ctx, c, message)\n\tserverStreaming(ctx, c, message)\n\tclientStream(ctx, c, message)\n\tbidirectional(ctx, c, message)\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">package main\n\nimport (\n\t// ...\n\tpb \"grpc.examples/proto/echo\"\n)\n\nvar port = flag.Int(\"port\", 50051, \"the port to serve on\")\n\nconst (\n\tstreamingCount = 10\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc main() {\n\tflag.Parse()\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tfmt.Printf(\"server listening at %v\\n\", lis.Addr())\n\n\ts := grpc.NewServer()\n\tpb.RegisterEchoServer(s, &amp;server{})\n\ts.Serve(lis)\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_一元_rpc_模式\">一元 RPC 模式</h3>\n<div class=\"paragraph\">\n<p>和普通方法调用类似：客户端发送请求，然后等待服务端响应。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_客户端_2\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func unaryCall(ctx context.Context, c pb.EchoClient, message string) {\n\tfmt.Printf(\"--- unary ---\\n\")\n\n\tr, err := c.UnaryEcho(ctx, &amp;pb.EchoRequest{Message: message}) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to call UnaryEcho: %v\", err)\n\t}\n\n\tfmt.Printf(\"response:\\n\")\n\tfmt.Printf(\" - %s\\n\", r.Message)\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>发送请求并等待响应</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端_2\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func (s *server) UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tfmt.Printf(\"--- UnaryEcho ---\\n\")\n\n\treturn &amp;pb.EchoResponse{Message: in.Message}, nil <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>直接返回处理结果</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_服务器端流_rpc_模式\">服务器端流 RPC 模式</h3>\n<div class=\"paragraph\">\n<p>客户端发送请求，服务端返回数据流。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_客户端_3\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func serverStreaming(ctx context.Context, c pb.EchoClient, message string) {\n\tfmt.Printf(\"--- server streaming ---\\n\")\n\n\tstream, err := c.ServerStreamingEcho(ctx, &amp;pb.EchoRequest{Message: message}) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to call ServerStreamingEcho: %v\", err)\n\t}\n\n\tvar rpcStatus error\n\tfmt.Printf(\"response:\\n\")\n\tfor {\n\t\tr, err := stream.Recv() <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\tif err != nil {\n\t\t\trpcStatus = err\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(\" - %s\\n\", r.Message)\n\t}\n\n\tif rpcStatus != io.EOF {\n\t\tlog.Fatalf(\"failed to finish server streaming: %v\", rpcStatus)\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>发送请求</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>通过 <code>Recv</code> 读取来自服务端的数据流</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端_3\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func (s *server) ServerStreamingEcho(in *pb.EchoRequest, stream pb.Echo_ServerStreamingEchoServer) error {\n\tfmt.Printf(\"--- ServerStreamingEcho ---\\n\")\n\n\tfor i := 0; i &lt; streamingCount; i++ {\n\t\tfmt.Printf(\"echo message %v\\n\", in.Message) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t\terr := stream.Send(&amp;pb.EchoResponse{Message: in.Message}) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>读取请求</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>通过 <code>Send</code> 发送数据流</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_客户端流_rpc_模式\">客户端流 RPC 模式</h3>\n<div class=\"paragraph\">\n<p>客户端发送数据流，服务端返回响应。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_客户端_4\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func clientStream(ctx context.Context, c pb.EchoClient, message string) {\n\tfmt.Printf(\"--- client streaming ---\\n\")\n\n\tstream, err := c.ClientStreamingEcho(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to call ClientStreamingEcho: %v\\n\", err)\n\t}\n\n\tfor i := 0; i &lt; streamingCount; i++ {\n\t\tif err := stream.Send(&amp;pb.EchoRequest{Message: message}); err != nil { <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t\t\tlog.Fatalf(\"failed to send streaming: %v\\n\", err)\n\t\t}\n\t}\n\n\tr, err := stream.CloseAndRecv() <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to CloseAndRecv: %v\\n\", err)\n\t}\n\tfmt.Printf(\"response:\\n\")\n\tfmt.Printf(\" - %s\\n\", r.Message)\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过 <code>Send</code> 发送数据流</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>通过 <code>CloseAndRecv</code> 读取响应</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端_4\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func (s *server) ClientStreamingEcho(stream pb.Echo_ClientStreamingEchoServer) error {\n\tfmt.Printf(\"--- ClientStreamingEcho ---\\n\")\n\n\tvar message string\n\tfor {\n\t\tin, err := stream.Recv() <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t\tif err == io.EOF {\n\t\t\tfmt.Printf(\"echo last received message\\n\")\n\t\t\treturn stream.SendAndClose(&amp;pb.EchoResponse{Message: message}) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\t}\n\t\tmessage = in.Message\n\t\tfmt.Printf(\"request received: %v, building echo\\n\", in)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过 <code>Recv</code> 接收数据流</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>通过 <code>SendAndClose</code> 发送响应</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_双向流_rpc_模式\">双向流 RPC 模式</h3>\n<div class=\"sect3\">\n<h4 id=\"_客户端_5\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func bidirectional(ctx context.Context, c pb.EchoClient, message string) {\n\tfmt.Printf(\"--- bidirectional ---\\n\")\n\n\tstream, err := c.BidirectionalStreamingEcho(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to call BidirectionalStreamingEcho: %v\\n\", err)\n\t}\n\n\tgo func() {\n\t\tfor i := 0; i &lt; streamingCount; i++ {\n\t\t\tif err := stream.Send(&amp;pb.EchoRequest{Message: message}); err != nil { <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t\t\t\tlog.Fatalf(\"failed to send streaming: %v\\n\", err)\n\t\t\t}\n\t\t}\n\t\tstream.CloseSend() <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t}()\n\n\tvar rpcStatus error\n\tfmt.Printf(\"response:\\n\")\n\tfor {\n\t\tr, err := stream.Recv() <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\t\tif err != nil {\n\t\t\trpcStatus = err\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(\" - %s\\n\", r.Message)\n\t}\n\tif rpcStatus != io.EOF {\n\t\tlog.Fatalf(\"failed to finish server streaming: %v\", rpcStatus)\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过 <code>Send</code> 发送数据流</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>数据发送完成后 <code>CloseSend</code></td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>通过 <code>Recv</code> 接收数据流</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端_5\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func (s *server) BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) error {\n\tfmt.Printf(\"--- BidirectionalStreamingEcho ---\\n\")\n\n\tfor {\n\t\tin, err := stream.Recv() <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"request received %v, sending echo\\n\", in)\n\t\tif err := stream.Send(&amp;pb.EchoResponse{Message: in.Message}); err != nil { <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\t\treturn err\n\t\t}\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过 <code>Recv</code> 接收数据流</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>通过 <code>Send</code> 发送数据流</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://grpc.io/docs/protoc-installation/\" class=\"bare\">https://grpc.io/docs/protoc-installation/</a></p>\n</li>\n<li>\n<p><a href=\"https://grpc.io/docs/languages/go/quickstart/\" class=\"bare\">https://grpc.io/docs/languages/go/quickstart/</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/grpc/grpc-go/issues/3794\" class=\"bare\">https://github.com/grpc/grpc-go/issues/3794</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/grpc/grpc-go/tree/v1.53.0/examples/features/proto/echo\" class=\"bare\">https://github.com/grpc/grpc-go/tree/v1.53.0/examples/features/proto/echo</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Go gRPC 基本使用"},"pageAttributes":{"slug":"grpc-go-start","category":"grpc"},"revision":{"date":"2023-02-21","number":"1.0"}}},"pageContext":{"id":"98c6ee92-820e-5e62-b10e-a6ab3837a53a","pageAttributes__slug":"grpc-go-start","__params":{"pageAttributes__slug":"grpc-go-start"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}