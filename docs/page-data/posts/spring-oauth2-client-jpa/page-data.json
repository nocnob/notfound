{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/spring-oauth2-client-jpa/","result":{"data":{"asciidoc":{"id":"e88ba9fc-80b4-5302-b232-8650e1cf703e","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Spring Boot 2.5.5</p>\n</li>\n<li>\n<p>PostgreSQL</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_依赖\"><a class=\"anchor\" href=\"#_依赖\"></a>依赖</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-gradle\" data-lang=\"gradle\">implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\nimplementation 'org.springframework.boot:spring-boot-starter-security'\nimplementation 'org.springframework.boot:spring-boot-starter-web'\nimplementation 'org.springframework.boot:spring-boot-starter-oauth2-client'\nruntimeOnly 'org.postgresql:postgresql'</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_配置\"><a class=\"anchor\" href=\"#_配置\"></a>配置</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>创建数据库:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sql\" data-lang=\"sql\">-- 创建角色\nCREATE ROLE example LOGIN PASSWORD 'YOUR_PASSWORD';\n-- 创建数据了\nCREATE DATABASE example_db WITH owner = example;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>修改 <code>application.properties</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-properties\" data-lang=\"properties\">spring.datasource.username=example\nspring.datasource.password=YOUR_PASSWORD\nspring.datasource.url=jdbc:postgresql://127.0.0.1/example_db\nspring.jpa.generate-ddl=true\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\n\nspring.security.oauth2.client.registration.github.client-id=CLIENT_ID\nspring.security.oauth2.client.registration.github.client-secret=CLIENT_SECRET\nspring.security.oauth2.client.registration.github.scope=read:user</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_代码\"><a class=\"anchor\" href=\"#_代码\"></a>代码</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        super.configure(http);\n        http.oauth2Login();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return PasswordEncoderFactories.createDelegatingPasswordEncoder();\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>开启基本认证、表单登陆和 oauth2 登陆</p>\n</li>\n<li>\n<p>配置密码加密方式</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Entity\n@Table(name = \"users\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n    @Column(unique = true)\n    private String username;\n    private String password;\n    private String provider;\n    private String uid;\n    // getter and setter\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>provider</code> registration id，如 <code>github</code></p>\n</li>\n<li>\n<p><code>uid</code> 三方平台上的用户 id</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public interface UserRepository extends CrudRepository&lt;User, Integer&gt; {\n    Optional&lt;User&gt; findByUsername(String username);\n    Optional&lt;User&gt; findByProviderAndUid(String provider, String uid);\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>两个基本查询</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class CustomUser implements UserDetails, OAuth2User {\n    private final String username;\n    private final String password;\n\n    public CustomUser(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        return AuthorityUtils.createAuthorityList(\"ROLE_USER\");\n    }\n    // 省略其其他接口实现\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>CustomUser</code> 实现两个 <code>UserDetails</code> 和 <code>OAuth2User</code>，<code>UserDetails</code> 用于表单登陆和基本认证，<code>OAuth2User</code> 用于 OAuth2 登陆</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username)\n                .orElseThrow(() -&gt;\n                        new UsernameNotFoundException(username));\n\n        return new CustomUser(user.getUsername(), user.getPassword());\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>使用用户名密码登陆以及基本认证时，从数据库中查询用户</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Service\npublic class CustomOAuth2UserService extends DefaultOAuth2UserService {\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {\n        OAuth2User oAuth2User = super.loadUser(userRequest);\n\n        String provider = userRequest.getClientRegistration().getRegistrationId();\n        String uid = oAuth2User.getName();\n\n        User user = userRepository.findByProviderAndUid(provider, uid).orElse(null);\n        if (user != null)\n            return new CustomUser(user.getUsername(), user.getPassword());\n\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        if (authentication == null)\n            throw new OAuth2AuthenticationException(\"error\");\n\n        Object principal = authentication.getPrincipal();\n        if (!(principal instanceof CustomUser))\n            throw new OAuth2AuthenticationException(\"error\");\n\n        user = userRepository.findByUsername(((CustomUser) principal).getUsername()).get();\n        if (user.getProvider() != null || user.getUid() != null)\n            throw new OAuth2AuthenticationException(\"error\");\n\n        user.setProvider(provider);\n        user.setUid(uid);\n        userRepository.save(user);\n\n        return new CustomUser(user.getUsername(), user.getPassword());\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>OAuth2 登陆，访问 URL <a href=\"http://localhost:8080/oauth2/authorization/github\" class=\"bare\">http://localhost:8080/oauth2/authorization/github</a> 时：</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>账号已经绑定，直接登陆</p>\n</li>\n<li>\n<p>账号未绑定且已经登陆，绑定账号并登陆</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\"><a class=\"anchor\" href=\"#_参考\"></a>参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://spring.io/guides/tutorials/spring-boot-oauth2/\" class=\"bare\">https://spring.io/guides/tutorials/spring-boot-oauth2/</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Spring Oauth2 Client JPA"},"pageAttributes":{"slug":"spring-oauth2-client-jpa","category":"spring"},"revision":{"date":"2021-10-31","number":"1.0"}}},"pageContext":{"id":"e88ba9fc-80b4-5302-b232-8650e1cf703e","pageAttributes__slug":"spring-oauth2-client-jpa","__params":{"pageAttributes__slug":"spring-oauth2-client-jpa"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}