{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/ruby-webrick/","result":{"data":{"asciidoc":{"id":"17c0c016-b6ed-5935-af10-2b7ebdbc2bab","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Webrick 是用 Ruby 语言实现的 HTTP 服务。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_运行过程\"><a class=\"anchor\" href=\"#_运行过程\"></a>运行过程</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_创建监听_socket\"><a class=\"anchor\" href=\"#_创建监听_socket\"></a>创建监听 socket</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">require 'webrick'\n\nserver = WEBrick::HTTPServer.new :Port =&gt; 8000\ntrap 'INT' do server.shutdown end # SIGINT</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>创建监听套接字，创建 mount table。mount table 将路由和 servlet 关联在一起</p>\n</li>\n<li>\n<p>注册 <code>SIGINT</code> 信号处理函数，接收到该信号时停止服务。<code>CTRL + C</code> 可产生该信号</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_挂载_proc\"><a class=\"anchor\" href=\"#_挂载_proc\"></a>挂载 proc</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">server.mount_proc '/' do |req, res|\n  res.body = \"object_id: #{object_id}\\n\"\nend</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>mount 的路由为 <code>/</code></p>\n</li>\n<li>\n<p>实际 mount 的 servlet 是一个 <code>HTTPServlet::ProcHandler</code> 实例，该实例包裹了 proc</p>\n</li>\n<li>\n<p>这里不同请求使用同一个实例， 由 <code>HTTPServlet::ProcHandler#get_instance</code> 决定</p>\n</li>\n<li>\n<p>mount table 路由为 key，servlet 为 value</p>\n</li>\n<li>\n<p>这里的 <code>object_id</code> 是哪个实例的？</p>\n</li>\n<li>\n<p>可处理 <code>GET</code> 和 <code>POST</code> 请求</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_挂载_class\"><a class=\"anchor\" href=\"#_挂载_class\"></a>挂载 class</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">class Simple &lt; WEBrick::HTTPServlet::AbstractServlet\n  def do_GET(request, response)\n    status, content_type, body = do_stuff_with(request)\n\n    response.status = 200\n    response['Content-Type'] = 'text/plain'\n    response.body = \"object_id: #{object_id}\\n\"\n  end\n\n  def do_stuff_with(request)\n    return 200, 'text/plain', 'you got a page'\n  end\nend\n\nserver.mount '/simple', Simple</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>mount 的路由为 <code>/simple</code></p>\n</li>\n<li>\n<p>mount servlet 为 Simple 类</p>\n</li>\n<li>\n<p>每次请求都会创建 Simple 实例, 由 <code>WEBrick::HTTPServlet::AbstractServlet.get_instance</code> 决定的</p>\n</li>\n<li>\n<p>mount table 路由为 key，servlet 为 value</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_启动服务\"><a class=\"anchor\" href=\"#_启动服务\"></a>启动服务</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">server.start</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>IO.select</code> 上阻塞，等待连接。处于循环之内</p>\n</li>\n<li>\n<p><code>WEBrick::GenericServer#start_thread</code> 启动线程处理 socket</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p><code>WEBrick::HTTPServer#run</code> 处理请求。方法中存在一个循环，一直到 socket 非 <code>:Running</code> 才退出</p>\n<div class=\"olist lowerroman\">\n<ol class=\"lowerroman\" type=\"i\">\n<li>\n<p><code>WEBrick::HTTPServer#service</code></p>\n<div class=\"olist upperalpha\">\n<ol class=\"upperalpha\" type=\"A\">\n<li>\n<p><code>WEBrick::HTTPServer#search_servlet</code> 通过 mount table 查询路由对应的 servlet</p>\n</li>\n<li>\n<p><code>si = servlet.get_instance(self, *options)</code> 获取 servlet 实例，可能会创建新的 servlet 实例</p>\n</li>\n<li>\n<p><code>si.service</code> 通过 servlet 实例处理请求</p>\n<div class=\"olist upperroman\">\n<ol class=\"upperroman\" type=\"I\">\n<li>\n<p>根据请求类型调用 <code>do_GET</code>、<code>do_POST</code> 等方法</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_总结\"><a class=\"anchor\" href=\"#_总结\"></a>总结</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>一个线程服务一个 socket</p>\n</li>\n<li>\n<p>每一个请求可能创建一个 servlet 实例</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\"><a class=\"anchor\" href=\"#_参考\"></a>参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/ruby/webrick\">Webrick</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Webrick 工作过程"},"pageAttributes":{"slug":"ruby-webrick","category":"ruby"},"revision":{"date":"2020-05-19","number":"1.0"}}},"pageContext":{"id":"17c0c016-b6ed-5935-af10-2b7ebdbc2bab","pageAttributes__slug":"ruby-webrick","__params":{"pageAttributes__slug":"ruby-webrick"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}