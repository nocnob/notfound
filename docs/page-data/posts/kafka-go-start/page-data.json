{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/kafka-go-start/","result":{"data":{"asciidoc":{"id":"79b84c19-b940-5276-8c2e-efaabe491292","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>使用 <a href=\"https://github.com/segmentio/kafka-go\">kafka-go</a> 做为客户端。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_生产者\"><a class=\"anchor\" href=\"#_生产者\"></a>生产者</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func produce(ctx context.Context) {\n\tw := &amp;kafka.Writer{\n\t\tAddr:     kafka.TCP(broker),\n\t\tTopic:    topic,\n\t\tBalancer: &amp;kafka.Hash{}, <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t}\n\tdefer w.Close()\n\n\tfor i := 0; i &lt; 10; i++ {\n\t\tvalue := fmt.Sprintf(\"msg-%d\", i)\n\t\tmsg := kafka.Message{Key: []byte(value), Value: []byte(value)}\n\t\tif err := w.WriteMessages(ctx, msg); err != nil { <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\t\tlog.Fatal(\"failed to write messages:\", err)\n\t\t}\n\t\tlog.Printf(\"write %s\", value)\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>负载均衡算法</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>发送消息到队列</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_消费者\"><a class=\"anchor\" href=\"#_消费者\"></a>消费者</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>两者方式使用使用消费者：</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>多个 go 协程共享同一个 Reader</p>\n</li>\n<li>\n<p>不同 go 协程使用不同 Reader</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>消费共同部分：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func doWork(ctx context.Context, r *kafka.Reader, idx int) {\n\tfor {\n\t\tctxT, cancel := context.WithTimeout(ctx, 10*time.Second)\n\t\tm, err := r.FetchMessage(ctxT) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t\tif err != nil {\n\t\t\tcancel()\n\t\t\tbreak\n\t\t}\n\t\tcancel()\n\n\t\tlog.Printf(\"go%d fetch: topic=%s partition=%d key=%s offset=%d value=%s\",\n\t\t\tidx, m.Topic, m.Partition, m.Key, m.Offset, m.Value)\n\n\t\ttime.Sleep(3 * time.Second) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\n\t\tlog.Printf(\"go%d commit: topic=%s partition=%d key=%s offset=%d value=%s\",\n\t\t\tidx, m.Topic, m.Partition, m.Key, m.Offset, m.Value)\n\t\tif err := r.CommitMessages(ctx, m); err != nil { <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n}\n\nfunc newReader() *kafka.Reader {\n\treturn kafka.NewReader(kafka.ReaderConfig{\n\t\tBrokers: []string{broker},\n\t\tGroupID: groupID,\n\t\tTopic:   topic,\n\t})\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>拉取消息</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>模拟耗时操作</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>提交消息</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_多个_go_协程共享同一个_reader\"><a class=\"anchor\" href=\"#_多个_go_协程共享同一个_reader\"></a>多个 go 协程共享同一个 Reader</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func consume1(ctx context.Context) {\n\tr := newReader()\n\tdefer r.Close()\n\n\tvar wg sync.WaitGroup\n\tfor i := 0; i &lt; 8; i++ {\n\t\twg.Add(1)\n\t\tgo func(idx int) {\n\t\t\tdoWork(ctx, r, idx)\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\twg.Wait()\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>同一个分区的消息<strong>并非</strong>按顺序获取和提交</p>\n</li>\n<li>\n<p>当偏移大的消息提交成功时，所有小于等于该偏移的消息都会被认为提交成功</p>\n</li>\n<li>\n<p>协程数量可以超过分区数量</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_不同_go_协程使用不同_reader\"><a class=\"anchor\" href=\"#_不同_go_协程使用不同_reader\"></a>不同 go 协程使用不同 Reader</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func consume2(ctx context.Context) {\n\tvar wg sync.WaitGroup\n\tfor i := 0; i &lt; 8; i++ {\n\t\twg.Add(1)\n\t\tgo func(idx int) {\n\t\t\tr := newReader()\n\t\t\tdoWork(ctx, r, idx)\n\t\t\tr.Close()\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\twg.Wait()\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>同一个分区消息按顺序获取和提交</p>\n</li>\n<li>\n<p>Reader 和协程数量需要小于等于分区数量，也就是最多支持分区数量个并发</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","document":{"title":"kafka go 客户端"},"pageAttributes":{"slug":"kafka-go-start","category":"kafka"},"revision":{"date":"2022-12-28","number":"1.0"}}},"pageContext":{"id":"79b84c19-b940-5276-8c2e-efaabe491292","pageAttributes__slug":"kafka-go-start","__params":{"pageAttributes__slug":"kafka-go-start"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}