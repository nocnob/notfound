{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/grpc-go-proxy/","result":{"data":{"asciidoc":{"id":"cf23eda4-832f-5739-bb13-9d726be726e7","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>测试代码改自 <a href=\"/posts/grpc-go-start/\">Go gRPC 基本使用</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_启动\">启动</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/proxy/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">var port = flag.Int(\"port\", 50052, \"the port to serve on\")\nvar addr = flag.String(\"addr\", \"localhost:50051\", \"the address to connect to\")\n\nfunc main() {\n\tflag.Parse()\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tfmt.Printf(\"server listening at %v\\n\", lis.Addr())\n\n\tctx, cancel := context.WithCancel(context.Background())\n\thandler := proxy.NewHandler(ctx, *addr) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tdefer cancel()\n\n\ts := grpc.NewServer(grpc.UnknownServiceHandler(handler.StreamHandler)) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\ts.Serve(lis) <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>封装好的 Handler；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>gRPC server 未注册服务，所有 RPC 请求都由 <code>grpc.UnknownServiceHandler</code> 处理；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>为 gRPC client 提供服务。</td>\n</tr>\n</table>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">internal/proxy/handler.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">var (\n\tclientStreamDescForProxying = &amp;grpc.StreamDesc{\n\t\tServerStreams: true,\n\t\tClientStreams: true,\n\t}\n)\n\ntype Handler struct {\n\tconn *grpc.ClientConn\n}\n\nfunc NewHandler(ctx context.Context, addr string) *Handler {\n\tconn, err := grpc.DialContext(ctx, addr, grpc.WithTransportCredentials(insecure.NewCredentials())) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\n\treturn &amp;Handler{\n\t\tconn: conn,\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>与 gRPC server 建立连接</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_转发\">转发</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func (h *Handler) StreamHandler(srv interface{}, serverStream grpc.ServerStream) error {\n\tfullMethodName, ok := grpc.MethodFromServerStream(serverStream) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif !ok {\n\t\treturn status.Errorf(codes.Internal, \"lowLevelServerStream not exists in context\")\n\t}\n\tlog.Println(fullMethodName)\n\n\tclientCtx, clientCancel := context.WithCancel(serverStream.Context())\n\tdefer clientCancel()\n\n    <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\tclientStream, err := grpc.NewClientStream(clientCtx, clientStreamDescForProxying, h.conn, fullMethodName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts2cErrChan := h.forwardServerToClient(serverStream, clientStream) <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\tc2sErrChan := h.forwardClientToServer(clientStream, serverStream) <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n\tfor i := 0; i &lt; 2; i++ {\n\t\tselect {\n\t\tcase s2cErr := &lt;-s2cErrChan:\n\t\t\tif s2cErr == io.EOF {\n\t\t\t\tclientStream.CloseSend()\n\t\t\t} else {\n\t\t\t\tclientCancel()\n\t\t\t\treturn status.Errorf(codes.Internal, \"failed proxying s2c: %v\", s2cErr)\n\t\t\t}\n\t\tcase c2sErr := &lt;-c2sErrChan:\n\t\t\tserverStream.SetTrailer(clientStream.Trailer())\n\t\t\tif c2sErr != io.EOF {\n\t\t\t\treturn c2sErr\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\n\treturn status.Errorf(codes.Internal, \"gRPC proxying should never reach this stage.\")\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>获取方法名；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>在代理和服务端的连接上(proxy 本身做为客户端)创建新 stream；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>服务 stream 转发到客户 stream (client &#8594; proxy &#8594; server)；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>客户 stream 转发到服务 stream (server &#8594; proxy &#8594; client)。</td>\n</tr>\n</table>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func (h *Handler) forwardClientToServer(src grpc.ClientStream, dst grpc.ServerStream) chan error {\n\tret := make(chan error, 1)\n\tgo func() {\n\t\tf := &amp;emptypb.Empty{}\n\t\tfor i := 0; ; i++ {\n\t\t\tif err := src.RecvMsg(f); err != nil {\n\t\t\t\tret &lt;- err\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif i == 0 {\n\t\t\t\tmd, err := src.Header()\n\t\t\t\tif err != nil {\n\t\t\t\t\tret &lt;- err\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif err := dst.SendHeader(md); err != nil {\n\t\t\t\t\tret &lt;- err\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif err := dst.SendMsg(f); err != nil {\n\t\t\t\tret &lt;- err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\treturn ret\n}\n\nfunc (h *Handler) forwardServerToClient(src grpc.ServerStream, dst grpc.ClientStream) chan error {\n\tret := make(chan error, 1)\n\tgo func() {\n\t\tf := &amp;emptypb.Empty{}\n\t\tfor i := 0; ; i++ {\n\t\t\tif err := src.RecvMsg(f); err != nil {\n\t\t\t\tret &lt;- err\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif err := dst.SendMsg(f); err != nil {\n\t\t\t\tret &lt;- err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\treturn ret\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_测试\">测试</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">go run cmd/echo/server/main.go\ngo run cmd/echo/proxy/main.go\ngo run cmd/echo/client/main.go -addr :50052</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/mwitkow/grpc-proxy\" class=\"bare\">https://github.com/mwitkow/grpc-proxy</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Go gRPC proxy"},"pageAttributes":{"slug":"grpc-go-proxy","category":"grpc"},"revision":{"date":"2023-03-04","number":"1.0"}}},"pageContext":{"id":"cf23eda4-832f-5739-bb13-9d726be726e7","pageAttributes__slug":"grpc-go-proxy","__params":{"pageAttributes__slug":"grpc-go-proxy"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}