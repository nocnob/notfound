{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/grpc-go-etcd-discovery/","result":{"data":{"asciidoc":{"id":"d4a06965-fe0d-508e-b8ac-bb57fb5e9eda","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>测试代码改自 <a href=\"/posts/grpc-go-start/\">Go gRPC 基本使用</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_客户端\">客户端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>gRPC 客户端使用 etcd 命名解析器将网络地址解析到已注册的地址。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">package main\n\nimport (\n\tclientv3 \"go.etcd.io/etcd/client/v3\"\n\t\"go.etcd.io/etcd/client/v3/naming/resolver\"\n\tpb \"grpc.examples/proto/echo\"\n    //...\n)\n\nvar url = flag.String(\"url\", \"http://127.0.0.1:2379\", \"the address to connect to\")\n\nfunc main() {\n\tflag.Parse()\n\n\tcli, err := clientv3.NewFromURL(*url) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"new etcd client: %v\", err)\n\t}\n\tdefer cli.Close()\n\n\tetcdResolver, err := resolver.NewBuilder(cli) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"build etcd resolver: %v\", err)\n\t}\n\n\tconn, err := grpc.Dial(\n\t\t\"etcd:///example/echo\", <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\t\tgrpc.WithResolvers(etcdResolver), <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\tgrpc.WithDefaultServiceConfig(`{\"loadBalancingConfig\": [{\"round_robin\":{}}]}`), <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n    // ...\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>使用 url 创建 etcd 客户端；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>创建 gRPC resolver；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>网络地址；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>负载均衡使用 <code>round_robin</code>。</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>etcd resolver 通过 watch key <code>example/echo</code> 获取 etcd 中 gRPC 服务端地址并将其更新到 gRPC resolver.ClientConn 中，等同于：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">etcdctl watch --prefix example/echo</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_服务端\">服务端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>服务端在启动时将服务注册到 etcd。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">package main\n\nimport (\n\tclientv3 \"go.etcd.io/etcd/client/v3\"\n\t\"go.etcd.io/etcd/client/v3/naming/endpoints\"\n\t\"google.golang.org/grpc\"\n\tpb \"grpc.examples/proto/echo\"\n    // ...\n)\n\nvar port = flag.Int(\"port\", 50051, \"the port to serve on\")\nvar url = flag.String(\"url\", \"http://127.0.0.1:2379\", \"the address to connect to\")\n\nfunc main() {\n\tflag.Parse()\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tfmt.Printf(\"server listening at %v\\n\", lis.Addr())\n\n\tcli, err := clientv3.NewFromURL(*url) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"new etcd client: %v\", err)\n\t}\n\tdefer cli.Close()\n\n\tem, err := endpoints.NewManager(cli, \"example/echo\") <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"manager: %v\", err)\n\t}\n\tem.AddEndpoint(context.Background(), fmt.Sprintf(\"example/echo/%d\", *port),\n\t\tendpoints.Endpoint{Addr: lis.Addr().String()}) <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\n\ts := grpc.NewServer()\n\tpb.RegisterEchoServer(s, &amp;server{})\n\ts.Serve(lis)\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>创建 etcd 客户端；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>端点管理器；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>将 gRPC 服务地址注册到 etcd。</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>注册过程类似于：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">etcdctl put example/echo/127.0.0.1:50051 '{\"Addr\":\"127.0.0.1:50051\"}'</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>通过 <code>etcdctl</code> 获取注册信息：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">etcdctl get --prefix example/echo\n#&gt; example/echo/50051\n#&gt; {\"Op\":0,\"Addr\":\"[::]:50051\",\"Metadata\":null}\n#&gt; example/echo/50052\n#&gt; {\"Op\":0,\"Addr\":\"[::]:50052\",\"Metadata\":null}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://etcd.io/docs/v3.5/dev-guide/grpc_naming/\" class=\"bare\">https://etcd.io/docs/v3.5/dev-guide/grpc_naming/</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"gRPC Go 使用 etcd 服务发现"},"pageAttributes":{"slug":"grpc-go-etcd-discovery","category":"grpc"},"revision":{"date":"2023-03-12","number":"1.0"}}},"pageContext":{"id":"d4a06965-fe0d-508e-b8ac-bb57fb5e9eda","pageAttributes__slug":"grpc-go-etcd-discovery","__params":{"pageAttributes__slug":"grpc-go-etcd-discovery"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}