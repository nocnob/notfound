{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/graphql-java-batching/","result":{"data":{"asciidoc":{"id":"a466b3ee-aabd-54ef-baaa-849902d7cfca","html":"<div class=\"sect1\">\n<h2 id=\"_graphql_java_以及_spring_boot_batching\"><a class=\"anchor\" href=\"#_graphql_java_以及_spring_boot_batching\"></a>GraphQL Java 以及 Spring Boot: Batching</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>OpenJDK 11</p>\n</li>\n<li>\n<p>Gradle 6.8</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>通过 <code>java-dataloader</code> 处理 N+1 问题。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_依赖\"><a class=\"anchor\" href=\"#_依赖\"></a>依赖</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">implementation 'com.graphql-java:graphql-java:16.2'  // 新\nimplementation 'com.graphql-java:graphql-java-spring-boot-starter-webmvc:2.0' // 新\nimplementation 'com.google.guava:guava:30.1.1-jre' // 新(可选)\n\nimplementation 'org.springframework.boot:spring-boot-starter-web'\ntestImplementation 'org.springframework.boot:spring-boot-starter-test'</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>graphql-java</code> 中已将添加 <code>java-dataloader</code> 依赖，不需要额外添加。</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_源码\"><a class=\"anchor\" href=\"#_源码\"></a>源码</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\npublic class StarWarsWiring {\n    private final DataLoaderRegistry dataLoaderRegistry;\n\n    public StarWarsWiring() {\n        this.dataLoaderRegistry = new DataLoaderRegistry();\n        dataLoaderRegistry.register(\"characters\", newCharacterDataLoader());\n    }\n\n    //提供 DataLoaderRegistry 给 graphql-java-spring-webmvc 使用\n    @Bean\n    public DataLoaderRegistry dataLoaderRegistry() {\n        // DataLoaderRegistry 是全局的，在它之上注册的 DataLoader 也是全局的\n        // 所有请求都会共用相同的缓存\n        return dataLoaderRegistry;\n    }\n\n    private DataLoader&lt;String,Character&gt; newCharacterDataLoader() {\n        return new DataLoader&lt;&gt;(characterBatchLoader);\n    }\n\n    private BatchLoader&lt;String, Character&gt; characterBatchLoader = keys -&gt; {\n        // BatchLoader 中存在缓存，多次请求相同数据时也会使用缓存\n        return CompletableFuture.supplyAsync(() -&gt; getCharacterDataViaBatchHTTPApi(keys));\n    };\n\n    // 数据批量加载\n    private List&lt;Character&gt; getCharacterDataViaBatchHTTPApi(List&lt;String&gt; keys) {\n        return keys.stream().map(StarWarsData::getCharacterData).collect(Collectors.toList());\n    }\n\n    DataFetcher&lt;CompletableFuture&lt;Character&gt;&gt; humanDataFetcher = environment -&gt; {\n        // 获取 DataLoader\n        DataLoader&lt;String, Character&gt; dataLoader =  environment.getDataLoader(\"characters\");\n        String id = environment.getArgument(\"id\");\n        // 从 DataLoader 获取单条数据，数据不会立刻加载\n        return dataLoader.load(id);\n    };\n\n    DataFetcher&lt;CompletableFuture&lt;Character&gt;&gt; droidDataFetcher = environment -&gt; {\n        DataLoader&lt;String, Character&gt; dataLoader =  environment.getDataLoader(\"characters\");\n        String id = environment.getArgument(\"id\");\n        return dataLoader.load(id);\n    };\n\n    DataFetcher&lt;CompletableFuture&lt;Character&gt;&gt; heroDataFetcher = environment -&gt; {\n        DataLoader&lt;String, Character&gt; dataLoader =  environment.getDataLoader(\"characters\");\n        return dataLoader.load(\"1002\");\n    };\n\n    DataFetcher&lt;CompletableFuture&lt;List&lt;Character&gt;&gt;&gt; friendsDataFetcher = environment -&gt; {\n        DataLoader&lt;String, Character&gt; dataLoader =  environment.getDataLoader(\"characters\");\n        Character character = environment.getSource();\n        // 从 DataLoader 获取多条数据，不会立刻加载\n        return dataLoader.loadMany(character.getFriends());\n    };\n\n    // 省略部分代码\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>需要提供 <code>DataLoaderRegistry</code> bean 给 graphql-java-spring-webmvc 使用</p>\n</li>\n<li>\n<p>DataLoader 中的数据会延迟加载并且存在缓存，可以处理 N+1</p>\n</li>\n<li>\n<p>当前 DataLoaderRegistry 和 DataLoader 是全局的，因此不同请求会使用相同缓存</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_参考\"><a class=\"anchor\" href=\"#_参考\"></a>参考</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>源码来自 <a href=\"https://github.com/graphql-java/graphql-java-examples\" class=\"bare\">https://github.com/graphql-java/graphql-java-examples</a> 有改动</p>\n</li>\n<li>\n<p><a href=\"https://www.graphql-java.com/documentation/v16/batching/\" class=\"bare\">https://www.graphql-java.com/documentation/v16/batching/</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","document":{"title":"GraphQL Java 以及 Spring Boot: Batching"},"pageAttributes":{"slug":"graphql-java-batching","category":"graphql"},"revision":{"date":"2021-03-27","number":"1.0"}}},"pageContext":{"id":"a466b3ee-aabd-54ef-baaa-849902d7cfca","pageAttributes__slug":"graphql-java-batching","__params":{"pageAttributes__slug":"graphql-java-batching"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}