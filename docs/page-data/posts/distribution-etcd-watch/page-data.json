{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/distribution-etcd-watch/","result":{"data":{"asciidoc":{"id":"e20dda75-bd9f-5ff7-919a-1e779dcbed5b","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>etcd 可用于服务注册与发现，客户端 watch 服务地址列表变更，服务端设置服务地址。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_客户端\">客户端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>客户端 watch 地址的变化，更新服务监听地址列表。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">package main\n\nimport (\n\tclientv3 \"go.etcd.io/etcd/client/v3\"\n\t\"go.etcd.io/etcd/client/v3/naming/endpoints\"\n    // ...\n)\n\nconst (\n\tSERVICE_NAME = \"example/http\"\n)\n\nvar url = flag.String(\"url\", \"http://127.0.0.1:2379\", \"the etcd address to connect to\")\n\nfunc main() {\n\tflag.Parse()\n\n\tcli, err := clientv3.NewFromURL(*url) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"new etcd client: %v\", err)\n\t}\n\tdefer cli.Close()\n\n\tem, err := endpoints.NewManager(cli, SERVICE_NAME)\n\tif err != nil {\n\t\tlog.Printf(\"new manager: %v\", err)\n\t}\n\n\tctx := context.Background()\n\twatch, err := em.NewWatchChannel(ctx) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\tif err != nil {\n\t\tlog.Printf(\"new watch channel: %v\", err)\n\t}\n\n\tallUps := make(map[string]*endpoints.Update)\n\tfor {\n\t\tselect {\n\t\tcase &lt;-ctx.Done():\n\t\t\treturn\n\t\tcase ups, ok := &lt;-watch: <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfor _, up := range ups {\n\t\t\t\tswitch up.Op {\n\t\t\t\tcase endpoints.Add:\n\t\t\t\t\tallUps[up.Key] = up\n\t\t\t\t\tlog.Printf(\"add: key=%s, addr=%s\", up.Key, up.Endpoint.Addr)\n\t\t\t\tcase endpoints.Delete:\n\t\t\t\t\tdelete(allUps, up.Key)\n\t\t\t\t\tlog.Printf(\"del: key=%s, addr=%s\", up.Key, up.Endpoint.Addr)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>etcd 客户端；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>创建 watch channel；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>从通道中获取 etcd key 变更。</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>等同于：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">etcdctl get --prefix example/http\netcdctl watch --prefix example/http</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_服务端\">服务端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>服务端注册服务地址，设置服务监听地址。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">package main\n\nimport (\n\tclientv3 \"go.etcd.io/etcd/client/v3\"\n\t\"go.etcd.io/etcd/client/v3/naming/endpoints\"\n    // ...\n)\n\nconst (\n\tSERVICE_NAME = \"example/http\"\n)\n\nvar url = flag.String(\"url\", \"http://127.0.0.1:2379\", \"the etcd address to connect to\")\n\nfunc main() {\n\tflag.Parse()\n\n\tcli, err := clientv3.NewFromURL(*url) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"new etcd client: %v\", err)\n\t}\n\tdefer cli.Close()\n\n\tem, err := endpoints.NewManager(cli, SERVICE_NAME)\n\tif err != nil {\n\t\tlog.Printf(\"new manager: %v\", err)\n\t}\n\n\tctx := context.Background()\n\n\tports := []int{8080, 8081, 8082}\n\tfor _, port := range ports {\n\t\tkey := fmt.Sprintf(\"%s/%d\", SERVICE_NAME, port)\n\t\taddr := fmt.Sprintf(\"http://127.0.0.1:%d\", port)\n\n\t\tif err := em.AddEndpoint(ctx, key, endpoints.Endpoint{Addr: addr}); err != nil { <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\t\tlog.Printf(\"add point: %v\", err)\n\t\t}\n\t}\n\n\tkey := fmt.Sprintf(\"%s/%d\", SERVICE_NAME, ports[0])\n\tif err := em.DeleteEndpoint(ctx, key); err != nil { <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\t\tlog.Printf(\"add point: %v\", err)\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>etcd 客户端；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>注册服务：将当前服务的监听地址添加到 etcd 中；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>移除服务：将当前服务的监听地址从 etcd 中移除。</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_lease\">lease</h3>\n<div class=\"paragraph\">\n<p>绑定租约，过期没有续租服务地址将被移除。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">lease, err := cli.Grant(ctx, 10) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\nif err != nil {\n\tlog.Fatalf(\"lease grant: %v\", err)\n}\n\ngo func() {\n\tch, err := cli.KeepAlive(ctx, lease.ID) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"keep alive %v\", err)\n\t}\n\tfor c := range ch {\n\t\tlog.Println(\"lease ch:\", c)\n\t}\n}()\n\n<i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\nif err := em.AddEndpoint(ctx, key, endpoints.Endpoint{Addr: addr}, clientv3.WithLease(lease.ID)); err != nil {\n\tlog.Printf(\"add point: %v\", err)\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>租约授予 TTL 10s；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>续租；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>租约和 key 绑定。</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://etcd.io/docs/v3.5/dev-guide/grpc_naming/\" class=\"bare\">https://etcd.io/docs/v3.5/dev-guide/grpc_naming/</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"etcd go client 服务注册与发现"},"pageAttributes":{"slug":"distribution-etcd-watch","category":"distribution"},"revision":{"date":"2023-03-12","number":"1.0"}}},"pageContext":{"id":"e20dda75-bd9f-5ff7-919a-1e779dcbed5b","pageAttributes__slug":"distribution-etcd-watch","__params":{"pageAttributes__slug":"distribution-etcd-watch"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}