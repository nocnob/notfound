{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/postgresql-queue-golang/","result":{"data":{"asciidoc":{"id":"cfff3e1e-931c-58f0-90b2-f991324e1524","html":"<div class=\"sect1\">\n<h2 id=\"_驱动\"><a class=\"anchor\" href=\"#_驱动\"></a>驱动</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>使用 <a href=\"https://github.com/jackc/pgx\">pgx</a> 作为驱动，该驱动接口与 <a href=\"https://pkg.go.dev/database/sql\">database/sql</a> 有差异，直接支持 JSON。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">go get github.com/jackc/pgx/v4</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_连接数据库\"><a class=\"anchor\" href=\"#_连接数据库\"></a>连接数据库</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func connect() *pgx.Conn {\n\t// postgres://postgres:123456@127.0.0.1:5432/example\n\tconn, err := pgx.Connect(context.Background(), os.Getenv(\"DATABASE_URL\")) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"Unable to connect to database: %v\\n\", err)\n\t}\n\n\terr = conn.Ping(context.Background()) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\tif err != nil {\n\t\tlog.Fatalf(\"Unable to ping database: %v\\n\", err)\n\t}\n\n\treturn conn\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过环境变量连接数据库</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>测试数据库联通性</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_生产者\"><a class=\"anchor\" href=\"#_生产者\"></a>生产者</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>生产者在数据库中添加一条记录作为消息。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\ntype Payload struct {\n\tID  int    `json:\"id\"`\n\tArg string `json:\"arg\"`\n}\n\nfunc produce() {\n\tconn := connect()\n\tdefer conn.Close(context.Background())\n\n\tfor i := 0; i &lt; 10; i += 1 {\n\t\tpayload := &amp;Payload{ID: 1, Arg: fmt.Sprintf(\"arg %d\", i)}\n\t\tresult, err := conn.Exec(context.Background(), \"INSERT INTO queues (payload) VALUES ($1)\", payload) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\tif err != nil {\n\t\t\tlog.Println(\"produce\", \"error\", err)\n\t\t} else {\n\t\t\tlog.Println(\"produce\", \"insert\", result.RowsAffected())\n\t\t}\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>队列数据部分格式为 JSON</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>投递消息：在数据库中添加一条记录</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_消费者\"><a class=\"anchor\" href=\"#_消费者\"></a>消费者</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>消费者从数据库中查询消息记录，消费成功后，将记录删除。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func consumer() {\n\tconn := connect()\n\tdefer conn.Close(context.Background())\n\n\tfor {\n\n\t\ttx, err := conn.Begin(context.Background()) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\n\t\tvar id int\n\t\tvar name string\n\t\tvar payload Payload\n\n\t\terr = tx.QueryRow(context.Background(), \"SELECT id, name, payload FROM queues LIMIT 1 FOR UPDATE SKIP LOCKED\").\n\t\t\tScan(&amp;id, &amp;name, &amp;payload) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\tif err != nil {\n\t\t\ttx.Rollback(context.Background())\n\t\t\tif err == pgx.ErrNoRows {\n\t\t\t\ttime.Sleep(5 * time.Second) <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Println(\"id:\", id, \", name:\", name, \", payload:\", payload) <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n\n\t\t_, err = tx.Exec(context.Background(), \"DELETE FROM queues WHERE id = $1\", id) <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\n\t\terr = tx.Commit(context.Background()) <i class=\"conum\" data-value=\"6\"></i><b>(6)</b>\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>开始事务</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>获取消息</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>无记录，休息</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>执行任务</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td>任务执行成功后删除</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"6\"></i><b>6</b></td>\n<td>提交事务</td>\n</tr>\n</table>\n</div>\n</div>\n</div>","document":{"title":"PostgreSQL Queue Golang 实现"},"pageAttributes":{"slug":"postgresql-queue-golang","category":"database"},"revision":{"date":"2022-06-23","number":"1.0"}}},"pageContext":{"id":"cfff3e1e-931c-58f0-90b2-f991324e1524","pageAttributes__slug":"postgresql-queue-golang","__params":{"pageAttributes__slug":"postgresql-queue-golang"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}