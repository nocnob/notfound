{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/grpc-ruby-start/","result":{"data":{"asciidoc":{"id":"05715497-a33d-58ea-9e8d-f31b13b8e1da","html":"<div class=\"sect1\">\n<h2 id=\"_准备\">准备</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>protoc 安装：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"># 下载\nPB_REL=\"https://github.com/protocolbuffers/protobuf/releases\"\ncurl -LO $PB_REL/download/v3.15.8/protoc-3.15.8-linux-x86_64.zip\n# 解压\nunzip protoc-3.15.8-linux-x86_64.zip -d $HOME/.local\n# 设置环境变量\nexport PATH=\"$PATH:$HOME/.local/bin\"\n# 检查 protoc 版本\nprotoc --version</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>protoc ruby 工具：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo gem install grpc-tools</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>初始化目录：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git init grpc-examples\ncd grpc-examples\nmkdir -p proto/echo\nmkdir -p cmd/echo/client\nmkdir -p cmd/echo/server\n\nbundle init\nbundle add grpc</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>创建 proto 文件, 文件中包含了四种不同的 RPC 模式：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">proto/echo/echo.proto</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-protobuf\" data-lang=\"protobuf\">syntax = \"proto3\";\n\noption go_package = \"grpc.examples/proto/echo\";\n\npackage examples;\n\n// EchoRequest is the request for echo.\nmessage EchoRequest {\n  string message = 1;\n}\n\n// EchoResponse is the response for echo.\nmessage EchoResponse {\n  string message = 1;\n}\n\n// Echo is the echo service.\nservice Echo {\n  // UnaryEcho is unary echo.\n  rpc UnaryEcho(EchoRequest) returns (EchoResponse) {}\n  // ServerStreamingEcho is server side streaming.\n  rpc ServerStreamingEcho(EchoRequest) returns (stream EchoResponse) {}\n  // ClientStreamingEcho is client side streaming.\n  rpc ClientStreamingEcho(stream EchoRequest) returns (EchoResponse) {}\n  // BidirectionalStreamingEcho is bidi streaming.\n  rpc BidirectionalStreamingEcho(stream EchoRequest) returns (stream EchoResponse) {}\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>生成 PB 文件：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">grpc_tools_ruby_protoc \\\n    --ruby_out=lib \\\n    --grpc_out=lib \\\n    -I proto \\\n    proto/echo/echo.proto</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>--ruby_out</code> 生成 ruby 源文件目录</p>\n</li>\n<li>\n<p><code>--grpc_out</code> 生成 ruby grpc 源文件目录</p>\n</li>\n<li>\n<p><code>-I</code> 导入时使用的查询路径</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_grpc\">gRPC</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_main\">main</h3>\n<div class=\"sect3\">\n<h4 id=\"_服务端\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">this_dir = File.expand_path(File.dirname(__FILE__))\nlib_dir = File.join(this_dir, '..', '..', '..', 'lib')\n$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)\n\nrequire 'grpc'\nrequire 'echo/echo_services_pb'\n\n$addr            = \"localhost:50051\"\n$message         = \"this is examples\"\n$streaming_count = 10\n\nclass MessageEnum\n  def initialize(reqs, size = 1)\n    @reqs = reqs\n    @size = size\n  end\n\n  def each\n    return enum_for(:each) unless block_given?\n\n    @size.times do\n      @reqs.each do |req|\n        yield Examples::EchoResponse.new(message: req.message)\n      end\n    end\n  end\nend\n\ndef main\n  s = GRPC::RpcServer.new\n  s.add_http2_port($addr, :this_port_is_insecure)\n  GRPC.logger.info(\"... running insecurely on #{$port}\")\n  s.handle(ServerImpl.new)\n  s.run_till_terminated_or_interrupted([1, 'int', 'SIGQUIT'])\nend\n\nmain</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_客户端\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">this_dir = File.expand_path(File.dirname(__FILE__))\nlib_dir = File.join(this_dir, '..', '..', '..', 'lib')\n$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)\n\nrequire 'grpc'\nrequire 'echo/echo_services_pb'\n\n$addr            = \"localhost:50051\"\n$message         = \"this is examples\"\n$streaming_count = 10\n\nclass MessageEnum\n  def initialize(message, size)\n    @message = message\n    @size = size\n  end\n\n  def each\n    return enum_for(:each) unless block_given?\n\n    @size.times do\n      yield @message\n    end\n  end\nend\n\ndef main\n  stub = Examples::Echo::Stub.new($addr, :this_channel_is_insecure)\n\n  unary(stub, $message)\n  server_streaming(stub, $message)\n  client_stream(stub, $message)\n  bidirectional(stub, $message)\nend\n\nmain</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_一元_rpc_模式\">一元 RPC 模式</h3>\n<div class=\"paragraph\">\n<p>和普通方法调用类似：客户端发送请求，然后等待服务端响应。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_客户端_2\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">def unary(stub, message)\n  printf(\"--- unary ---\\n\")\n\n  r = stub.unary_echo(Examples::EchoRequest.new(message: message)) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n  printf(\"response:\\n\")\n  printf(\" - %s\\n\", r.message)\nend</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>发送请求并等待响应</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端_2\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">class ServerImpl &lt; Examples::Echo::Service\n  def unary_echo(req, _call)\n    printf(\"--- UnaryEcho ---\\n\")\n\n    Examples::EchoResponse.new(message: req.message) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  end\nend</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>直接返回处理结果</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_服务器端流_rpc_模式\">服务器端流 RPC 模式</h3>\n<div class=\"paragraph\">\n<p>客户端发送请求，服务端返回数据流。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_客户端_3\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">def server_streaming(stub, message)\n  printf(\"--- server streaming ---\\n\")\n\n  stream = stub.server_streaming_echo(Examples::EchoRequest.new(message: message)) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  printf(\"response:\\n\")\n  stream.each do |r|\n    printf(\" - %s\\n\", r.message) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n  end\nend</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>发送请求</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>读取来自服务端的数据流</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端_3\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">class ServerImpl &lt; Examples::Echo::Service\n  def server_streaming_echo(req, _call)\n    printf(\"--- ServerStreamingEcho ---\\n\")\n\n    MessageEnum.new([req], $streaming_count).each <i class=\"conum\" data-value=\"1\"></i><b>(1)</b> <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n  end\nend</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>读取请求</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>通过  <code>Enumerable</code> 发送数据流</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_客户端流_rpc_模式\">客户端流 RPC 模式</h3>\n<div class=\"paragraph\">\n<p>客户端发送数据流，服务端返回响应。</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_客户端_4\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">def client_stream(stub, message)\n  printf(\"--- client streaming ---\\n\")\n\n  enum = MessageEnum.new(Examples::EchoRequest.new(message: message), $streaming_count).each\n\n  r = stub.client_streaming_echo(enum) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  printf(\"response:\\n\")\n  printf(\" - %s\\n\", r.message)\nend</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过  <code>Enumerable</code> 发送数据流并等待响应</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端_4\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">class ServerImpl &lt; Examples::Echo::Service\n  def client_streaming_echo(call)\n    printf(\"--- ClientStreamingEcho ---\\n\")\n\n    message = ''\n    call.each_remote_read do |r| <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n      message = r.message\n      printf(\"request received: %s, building echo\\n\", r.message)\n    end\n\n    Examples::EchoResponse.new(message: message) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n  end\nend</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过 each_remote_read 接收数据流</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>发送响应</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_双向流_rpc_模式\">双向流 RPC 模式</h3>\n<div class=\"sect3\">\n<h4 id=\"_客户端_5\">客户端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">def bidirectional(stub, message)\n  printf(\"--- bidirectional ---\\n\")\n\n  enum = MessageEnum.new(Examples::EchoRequest.new(message: message), $streaming_count).each\n\n  stream = stub.bidirectional_streaming_echo(enum) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n  printf(\"response:\\n\")\n  stream.each do |r|\n    printf(\" - %s\\n\", r.message) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n  end\nend</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过  <code>Enumerable</code> 发送数据流并等待响应</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>接收数据流</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_服务端_5\">服务端</h4>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/server/main.rb</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">class ServerImpl &lt; Examples::Echo::Service\n  def bidirectional_streaming_echo(reqs)\n    printf(\"--- BidirectionalStreamingEcho ---\\n\")\n\n    MessageEnum.new(reqs).each <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n  end\nend</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>通过  <code>Enumerable</code> 接收以及发送数据流</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://grpc.io/docs/protoc-installation/\" class=\"bare\">https://grpc.io/docs/protoc-installation/</a></p>\n</li>\n<li>\n<p><a href=\"https://grpc.io/docs/languages/ruby/quickstart/\" class=\"bare\">https://grpc.io/docs/languages/ruby/quickstart/</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/grpc/grpc-go/tree/v1.53.0/examples/features/proto/echo\" class=\"bare\">https://github.com/grpc/grpc-go/tree/v1.53.0/examples/features/proto/echo</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Ruby gRPC 基本使用"},"pageAttributes":{"slug":"grpc-ruby-start","category":"grpc"},"revision":{"date":"2023-02-22","number":"1.0"}}},"pageContext":{"id":"05715497-a33d-58ea-9e8d-f31b13b8e1da","pageAttributes__slug":"grpc-ruby-start","__params":{"pageAttributes__slug":"grpc-ruby-start"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}