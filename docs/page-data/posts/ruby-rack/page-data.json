{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/ruby-rack/","result":{"data":{"asciidoc":{"id":"945b7899-08b5-5d92-aad0-02d1a00b86c7","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>模块化的 Ruby Web 服务接口</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_rackup\"><a class=\"anchor\" href=\"#_rackup\"></a>rackup</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>创建 <code>config.ru</code>，添加：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"># config.ru\nrun lambda {|env| [200, {'Content-Type' =&gt; 'text/plain'}, ['OK'] ]}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>执行 <code>rackup</code>，启动 HTTP 服务器。</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_过程\"><a class=\"anchor\" href=\"#_过程\"></a>过程</h3>\n<div class=\"paragraph\">\n<p><code>rackup</code> 文件内容如下：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">#!/usr/bin/env ruby\n# frozen_string_literal: true\n\nrequire \"rack\"\nRack::Server.start</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>Rack::Server#options</code></p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p><code>Rack::Server#default_options</code> 这里决定了查找的默认文件名 <code>options[:config]= 'config.ru'</code></p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p><code>Rack::Server#start</code></p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p><code>Rack::Server#server</code> 尝试 require <code>puma thin falcon webrick</code> 中的一个服务，假设为 <code>webrick</code>，则返回 <code>Rack::Handler::WEBrick</code> 类</p>\n<div class=\"olist lowerroman\">\n<ol class=\"lowerroman\" type=\"i\">\n<li>\n<p><code>Rack::Server#wrapped_app</code> 解析 <code>config.ru</code> 获取 <code>wrapped_app</code></p>\n<div class=\"olist upperalpha\">\n<ol class=\"upperalpha\" type=\"A\">\n<li>\n<p><code>Rack::Server#app</code></p>\n<div class=\"olist upperroman\">\n<ol class=\"upperroman\" type=\"I\">\n<li>\n<p><code>Rack::Server#build_app_and_options_from_config</code></p>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>Rack::Builder.parse_file</code></p>\n</li>\n<li>\n<p><code>Rack::Builder.load_file</code></p>\n</li>\n<li>\n<p><code>Rack::Builder.new_from_string</code> 在 <code>Rack::Builder</code> 类上下文中执行 <code>config.ru</code>，<code>run</code> 方法来源于此</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p><code>Rack::Handler::WEBrick.run</code> 启动服务 <code>webrick</code> 服务，在 <code>/</code> 路由下挂载 <code>Rack::Server#wrapped_app</code></p>\n<div class=\"olist upperalpha\">\n<ol class=\"upperalpha\" type=\"A\">\n<li>\n<p><code>WEBrick::HTTPServer#mount</code> 以 <code>Rack::Handler::WEBrick</code> 和 <code>wrapped_app</code> 作为参数</p>\n</li>\n<li>\n<p><code>WEBrick::HTTPServer#start</code> 启动 HTTP 服务</p>\n</li>\n<li>\n<p>请求到来时，创建 <code>Rack::Handler::WEBrick</code> 实例，并包裹 <code>wrapped_app</code></p>\n<div class=\"olist upperroman\">\n<ol class=\"upperroman\" type=\"I\">\n<li>\n<p><code>Rack::Handler::WEBrick#service</code> 调用 <code>service</code> 方法</p>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>app.call</code> 调用 <code>call</code> 方法，处理请求</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_过程代码\"><a class=\"anchor\" href=\"#_过程代码\"></a>过程代码</h3>\n<div class=\"paragraph\">\n<p>上述的黑魔法类似于下列代码：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"># server.rb\nrequire 'rack'\nrequire 'webrick'\n\napp = Rack::Builder.app do\n  # config.ru\n  run lambda {|env| [200, {'Content-Type' =&gt; 'text/plain'}, ['OK'] ]}\nend\n\nserver = WEBrick::HTTPServer.new :Port =&gt; 8080\nserver.mount '/', Rack::Handler::WEBrick, app\nserver.start</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>webrick 作为服务器处理请求，可以使用 <code>ruby server.rb</code> 直接运行。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_中间件\"><a class=\"anchor\" href=\"#_中间件\"></a>中间件</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>中间件可以一层层叠加，外层调用里层的中间件，直到最后的 <code>servlet</code>（run）：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">class Middleware\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    puts \"dome something\"\n    env[\"rack.some_header\"] = \"setting an example\"\n    @app.call(env)\n  end\nend\n\nuse Middleware\nrun lambda { |env| [200, { \"Content-Type\" =&gt; \"text/plain\" }, [\"OK\"]] }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>use</code> 方法源码：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">    def use(middleware, *args, &amp;block)\n      if @map\n        mapping, @map = @map, nil\n        @use &lt;&lt; proc { |app| generate_map(app, mapping) }\n      end\n      @use &lt;&lt; proc { |app| middleware.new(app, *args, &amp;block) }\n    end</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>to_app</code> 方法源码：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>@use</code> 为 <code>proc</code> 数组，意味着要调用 <code>user[0].call(app).call</code> 才会执行 <code>middleware.call</code></p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>第一次的 <code>call</code> 方法由 <code>to_app</code> 调用</p>\n</li>\n<li>\n<p>第二次的 <code>call</code> 用户请求到来时调用，意味着不同请求使用同一个中间件对象</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">    def to_app\n      app = @map ? generate_map(@run, @map) : @run\n      fail \"missing run or map statement\" unless app\n      app.freeze if @freeze_app\n      app = @use.reverse.inject(app) { |a, e| e[a].tap { |x| x.freeze if @freeze_app } }\n      @warmup.call(app) if @warmup\n      app\n    end</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>e[a]</code> 会调用 <code>call</code> 方法，最里层的 app 不会执行 <code>call</code> 方法，外层的中间件都会执行 <code>call</code> 方法创建中间件对象</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\">app = lambda { |a| \"param: #{a}\" }\napp[\"hello\"]\n=&gt; \"param: hello\"</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_代码过程\"><a class=\"anchor\" href=\"#_代码过程\"></a>代码过程</h3>\n<div class=\"paragraph\">\n<p>上述过程可简单的表达为如下代码：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ruby\" data-lang=\"ruby\"># server.rb\nrequire 'rack'\nrequire 'webrick'\n\n@use = []\n\n@use &lt;&lt; proc { |app| Rack::CommonLogger.new(app) }\n\napp = @run = lambda { |env| [200, {'Content-Type' =&gt; 'text/plain'}, ['OK']] }\n\napp = @use.reverse.inject(app) { |a, e| e[a] }\n\nserver = WEBrick::HTTPServer.new :Port =&gt; 8080\nserver.mount '/', Rack::Handler::WEBrick, app\nserver.start</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_总结\"><a class=\"anchor\" href=\"#_总结\"></a>总结</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>call</code> 方法穿透所有，层层包裹</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\"><a class=\"anchor\" href=\"#_参考\"></a>参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/rack/rack\">rack</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Ruby Rack"},"pageAttributes":{"slug":"ruby-rack","category":"ruby"},"revision":{"date":"2020-05-21","number":"1.0"}}},"pageContext":{"id":"945b7899-08b5-5d92-aad0-02d1a00b86c7","pageAttributes__slug":"ruby-rack","__params":{"pageAttributes__slug":"ruby-rack"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}