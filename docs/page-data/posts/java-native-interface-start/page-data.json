{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/java-native-interface-start/","result":{"data":{"asciidoc":{"id":"c26c34a9-f25b-5ce8-b189-2918ba9b7ab1","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>系统环境 Ubuntu 18.04</p>\n</li>\n<li>\n<p>cmake 编译 c 源码</p>\n</li>\n<li>\n<p>maven 打包</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_基本用法\"><a class=\"anchor\" href=\"#_基本用法\"></a>基本用法</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>静态方法，不涉及参数和返回值传递。</p>\n</div>\n<div class=\"paragraph\">\n<p>项目目录结构如下：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-text\" data-lang=\"text\">.\n├── pom.xml\n└── src\n    └── main\n        ├── java\n        │   └── com\n        │       └── example\n        │           ├── App.java\n        │           └── HelloNative.java     # 加载 .so 和调用 c 方法的 class\n        ├── jni\n        │   ├── CMakeLists.txt\n        │   ├── com_example_HelloNative.c    # c 函数文件\n        │   └── com_example_HelloNative.h    # javah 生成的头文件\n        └── resources\n            └── native\n                └── linux\n                    └── libHelloNative.so    # 编译生成的 so 文件目录</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>添加 <code>HelloNative.java</code>，注意关键字 <code>native</code></p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package com.example;\n\npublic class HelloNative {\n  public static native void greeting();\n}</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>通过 <code>javah</code> 生成头文件 <code>com_example_HelloNative.h</code>，使用的时编译生成的 .class</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">mvn compile\ncd target/classes/\njavah -d ../../src/main/jni com.example.HelloNative</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>添加 <code>com_example_HelloNative.c</code>，函数名直接从 <code>.h</code> 复制过来</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-c\" data-lang=\"c\">#include \"com_example_HelloNative.h\"\n\nJNIEXPORT void JNICALL Java_com_example_HelloNative_greeting (JNIEnv *env, jclass jc) {\n  printf(\"Hello Native!\");\n}</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>添加 <code>CMakeLists.txt</code>，更多用法需要查看https://cmake.org/documentation/[官方文档]</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cmake\" data-lang=\"cmake\">cmake_minimum_required (VERSION 2.6)\nproject(HelloNative)\nMESSAGE(STATUS \"PROJECT_NAME: \" ${PROJECT_NAME})\n\n# 仅支持 Linux\nif (NOT CMAKE_HOST_UNIX)\n  message(FATAL_ERROR \"not linux\")\nendif()\n\n# 需要设置 JAVA_HOME\nif(NOT DEFINED ENV{JAVA_HOME})\n  message(FATAL_ERROR \"not defined environment variable:JAVA_HOME\")\nendif()\n\nMESSAGE( STATUS \"JAVA_HOME: \" $ENV{JAVA_HOME})\n\nSET(JAVA_INCLUDE \"$ENV{JAVA_HOME}/include/\")\nSET(JAVA_INCLUDE_OS \"$ENV{JAVA_HOME}/include/linux/\")\n\n# 添加 include 头文件搜索路径\ninclude_directories(\"${PROJECT_SOURCE_DIR}\" \"${JAVA_INCLUDE}\" \"${JAVA_INCLUDE_OS}\")\n\n# 添加编译文件\nadd_library(HelloNative SHARED com_example_HelloNative.c)\n\nset(CMAKE_INSTALL_PREFIX \"${PROJECT_SOURCE_DIR}/../\")\nset(MAVEN_PATH \"resources/native\")\n\n# 编辑生成的 .so 安装到 resources 目录\ninstall (TARGETS HelloNative DESTINATION \"${CMAKE_INSTALL_PREFIX}${MAVEN_PATH}/linux\")</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>手动生成 <code>libHelloNative.so</code>，这一步可以添加到 <code>pom.xml</code> 中</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">mkdir src/main/jni/build\ncd src/main/jni/build\ncmake ..\nmake install</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>加载 <code>.so</code> 文件</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class HelloNative {\n  public static native void greeting();\n\n  static {\n    // System.loadLibrary(\"HelloNative\");\n    System.load(\"/tmp/libHelloNative.so\");\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>System.load()</code> 方法需要使用绝对路径。</p>\n</div>\n<div class=\"paragraph\">\n<p><code>System.loadLibrary()</code> 参数的名称没有前、后缀，使用该方法时需要将 <code>.so</code> 目录添加到环境变量 <code>LD_LIBRARY_PATH</code>，否则无法找到 <code>.so</code>，会出现如下错误：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">java -jar target/jni-1.0-SNAPSHOT.jar\nException in thread \"main\" java.lang.UnsatisfiedLinkError: no HelloNative in java.library.path: \\\n[/usr/java/packages/lib, /usr/lib/x86_64-linux-gnu/jni, /lib/x86_64-linux-gnu, /usr/lib/x86_64-linux-gnu, /usr/lib/jni, /lib, /usr/lib]\n        at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2670)\n        at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:830)\n        at java.base/java.lang.System.loadLibrary(System.java:1870)\n        at com.example.HelloNative.&lt;clinit&gt;(HelloNative.java:7)\n        at com.example.App.main(App.java:5)</code></pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_问题\"><a class=\"anchor\" href=\"#_问题\"></a>问题</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Q: 使用 maven 打包成 jar 时，<code>.so</code> 被压缩到了 <code>jar</code> 包中，无法直接读取。</p>\n<div class=\"paragraph\">\n<p>可以通过 java 中 resource 相关方法将 <code>.so</code> 文件写入到临时目录 <code>System.getProperty(\"java.io.tmpdir\")</code>，然后通过 <code>System.load</code> 以绝对路径为参数进行加载。</p>\n</div>\n</li>\n<li>\n<p>Q: 版本升级或者不同版本需要同时存在如何处理？</p>\n<div class=\"paragraph\">\n<p>可以考虑临时的文件名上加上版本号如 <code>libau.so.2.10</code>，避免版本冲突。</p>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\"><a class=\"anchor\" href=\"#_参考\"></a>参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/dynamsoft-dbr/java-jni-barcode\" class=\"bare\">https://github.com/dynamsoft-dbr/java-jni-barcode</a></p>\n</li>\n<li>\n<p>《Java核心技术·卷 II》</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"JNI 基本使用"},"pageAttributes":{"slug":"java-native-interface-start","category":"java"},"revision":{"date":"2020-05-16","number":"1.0"}}},"pageContext":{"id":"c26c34a9-f25b-5ce8-b189-2918ba9b7ab1","pageAttributes__slug":"java-native-interface-start","__params":{"pageAttributes__slug":"java-native-interface-start"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}