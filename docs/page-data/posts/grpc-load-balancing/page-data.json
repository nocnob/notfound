{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/grpc-load-balancing/","result":{"data":{"asciidoc":{"id":"2ff79eea-b4eb-5d50-9ca7-bdc4261cd1de","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>测试代码改自 <a href=\"/posts/grpc-go-start/\">Go gRPC 基本使用</a></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_命名解析器\">命名解析器</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>grpc 通过命名解析器将一个域名解析到多个网络地址，从而实现负载均衡。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/load_balancing/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">const (\n\texampleScheme        = \"example\"\n\texampleServiceName01 = \"lb01.example.grpc.io\"\n\texampleServiceName02 = \"lb02.example.grpc.io\"\n)\n\nvar addrs01 = []string{\"localhost:50051\", \"localhost:50052\"}\nvar addrs02 = []string{\"localhost:50053\", \"localhost:50054\"}\n\ntype exampleResolverBuilder struct{} <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n// 构建一个 resolver\nfunc (*exampleResolverBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error) {\n\tr := &amp;exampleResolver{\n\t\ttarget: target,\n\t\tcc:     cc,\n\t\taddrsStore: map[string][]string{\n\t\t\texampleServiceName01: addrs01,\n\t\t\texampleServiceName02: addrs02,\n\t\t},\n\t}\n\tr.start()\n\treturn r, nil\n}\n\n// resolver 支持的 scheme\nfunc (*exampleResolverBuilder) Scheme() string {\n\treturn exampleScheme\n}\n\ntype exampleResolver struct { <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\ttarget     resolver.Target\n\tcc         resolver.ClientConn\n\taddrsStore map[string][]string\n}\n\nfunc (r *exampleResolver) start() {\n\taddrStrs := r.addrsStore[r.target.Endpoint()] // 端点对应的地址列表\n\taddrs := make([]resolver.Address, len(addrStrs))\n\tfor i, s := range addrStrs {\n\t\taddrs[i] = resolver.Address{Addr: s}\n\t}\n\tr.cc.UpdateState(resolver.State{Addresses: addrs}) // 更新 ClientConn 地址列表信息\n}\n\nfunc (exampleResolver) ResolveNow(resolver.ResolveNowOptions) {}\n\nfunc (exampleResolver) Close() {}\n\nfunc init() {\n\tresolver.Register(&amp;exampleResolverBuilder{}) <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>实现接口 <a href=\"https://pkg.go.dev/google.golang.org/grpc@v1.53.0/resolver#Builder\">resolver.Builder</a> ，接口用于构建一个 Resolver</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>实现接口 <a href=\"https://pkg.go.dev/google.golang.org/grpc@v1.53.0/resolver#Resolver\">resolver.Resolver</a>，负载均衡使用的 Resolver。将地址信息列表更新到 <code>ClientConn</code>，<code>ClientConn</code> 会根据负载均衡算法选择地址。</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>注册 resolver</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_客户端\">客户端</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>客户端只需要修改 <code>grpc.Dial</code> 方法参数。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">cmd/echo/client/load_balancing/main.go</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">func main() {\n\tconn, err := grpc.Dial(\n\t\tfmt.Sprintf(\"%s:///%s\", exampleScheme, exampleServiceName01), <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\t\tgrpc.WithDefaultServiceConfig(`{\"loadBalancingConfig\": [{\"round_robin\":{}}]}`), <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tctx := context.Background()\n\tc := pb.NewEchoClient(conn)\n\n\tunaryCall(ctx, c, message)\n\tserverStreaming(ctx, c, message)\n\tclientStream(ctx, c, message)\n\tbidirectional(ctx, c, message)\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>连接目标会通过命名解析器解析到多个网络地址</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>负载均衡为 <code>round_robin</code> 轮询</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\">参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/grpc/grpc-go/tree/v1.53.0/examples/features/load_balancing\" class=\"bare\">https://github.com/grpc/grpc-go/tree/v1.53.0/examples/features/load_balancing</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"gRPC 负载均衡"},"pageAttributes":{"slug":"grpc-load-balancing","category":"grpc"},"revision":{"date":"2023-02-25","number":"1.0"}}},"pageContext":{"id":"2ff79eea-b4eb-5d50-9ca7-bdc4261cd1de","pageAttributes__slug":"grpc-load-balancing","__params":{"pageAttributes__slug":"grpc-load-balancing"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}