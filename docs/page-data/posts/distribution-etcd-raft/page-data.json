{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/distribution-etcd-raft/","result":{"data":{"asciidoc":{"id":"71ecd9e6-4150-5443-9ec1-562f19a95fee","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Etcd 提供了一个 raft 包 <a href=\"https://pkg.go.dev/go.etcd.io/etcd/raft/v3#Ready\">etcd/raft</a>，用户需要自己实现网络部分传输消息和存储部分来保存 raft 日志和状态。</p>\n</div>\n<div class=\"paragraph\">\n<p>官方提供了一个示例 <a href=\"https://github.com/etcd-io/etcd/tree/v3.5.7/contrib/raftexample\">raftexample</a>，基于该示例进行说明。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_概览\">概览</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>kvstore 和 raft 节点关系：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-plantuml\" data-lang=\"plantuml\">@startuml\n(kvstore) --&gt; (raftnode) : node.Propse()\n(kvstore) &lt;-- (raftnode) : committedEntries\n@enduml</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>kvstore 通过 <code>node.Propose()</code> 将值或者通过 <code>node.ProposeConfChange()</code> 将配置发送到 raft 状态机；</p>\n</li>\n<li>\n<p>kvstore 从 raft 状态机读取已提交的条目 committedEntries 或者快照。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>raft 节点之间的关系：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-plantuml\" data-lang=\"plantuml\">@startuml\n(raftnode1) --&gt; (raftnode2) : transport.Send()\n(raftnode2) --&gt; (raftnode2) : node.Step()\n(raftnode1) --&gt; (raftnode3) : transport.Send()\n(raftnode3) --&gt; (raftnode3) : node.Step()\n@enduml</code></pre>\n</div>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>主节点将 Messages （心跳、配置、普通数据等）发送到其他节点；</p>\n</li>\n<li>\n<p>从节点收到消息后通过 <code>node.Step()</code> 推动本地状态机。</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_启动\">启动</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_预写日志和快照\">预写日志和快照</h3>\n<div class=\"paragraph\">\n<p>启动时需要读取预写日志和快照。</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>从预写日志中获取所有快照信息 <code>[]walpb.Snapshot</code>：</p>\n<div class=\"listingblock\">\n<div class=\"title\">walpb.Snapshot</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type Snapshot struct {\n\tIndex uint64\n\tTerm  uint64\n\tConfState            *raftpb.ConfState\n}</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>根据预写日志 <code>[]walpb.Snapshot</code> 加载可用且最新的快照 <code>raftpb.Snapshot</code>：</p>\n<div class=\"listingblock\">\n<div class=\"title\">raftpb.Snapshot</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type Snapshot struct {\n\tData     []byte\n\tMetadata SnapshotMetadata\n}</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>从快照中元数据 <code>snapshot.Metadata</code> 获取 <code>walpb.Snapshot</code> 中的 <code>Index</code> 和 <code>Term</code>；</p>\n<div class=\"listingblock\">\n<div class=\"title\">raftpb.SnapshotMetadata</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type SnapshotMetadata struct {\n\tConfState ConfState\n\tIndex     uint64\n\tTerm      uint64\n}</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>根据 <code>walpb.Snapshot</code> 打开预写日志；</p>\n</li>\n<li>\n<p>从预写日志中读取 <code>raftpb.HardState</code> 和 <code>[]raftpb.Entry</code>；</p>\n</li>\n<li>\n<p>将 <code>raftpb.Snapshot</code>、<code>raftpb.HardState</code> 和 <code>[]raftpb.Entry</code> 应用到 <code>raft.MemoryStorage</code>。</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_raft_节点以及网络传输\">Raft 节点以及网络传输</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>通过 <code>raft.StartNode()</code> 或者 <code>raft.RestartNode()</code> 启动节点</p>\n</li>\n<li>\n<p>通过 <code>rafthttp.Transport{}</code> 进行网络连接：</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>添加 raft 节点客户端，用来和其他 raft 节点建立连接；</p>\n</li>\n<li>\n<p>在独立协程上启动 HTTP 服务，准备接收 raft 相关请求，接收到数据后需要调用 <code>node.Step</code> 推动 raft 状态机运行。</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>数据传输时会将快照和其他数据分开，避免因处理快照阻塞时间过长而影响到心跳。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ready\">Ready</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code>Ready</code> 是一个核心的结构，大部分操作都和 <code>Ready</code> 相关。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type Ready struct {\n\t// The current volatile state of a Node.\n\t// SoftState will be nil if there is no update.\n\t// It is not required to consume or store SoftState.\n\t*SoftState <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\n\t// The current state of a Node to be saved to stable storage BEFORE\n\t// Messages are sent.\n\t// HardState will be equal to empty state if there is no update.\n\tpb.HardState <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\n\t// ReadStates can be used for node to serve linearizable read requests locally\n\t// when its applied index is greater than the index in ReadState.\n\t// Note that the readState will be returned when raft receives msgReadIndex.\n\t// The returned is only valid for the request that requested to read.\n\tReadStates []ReadState <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\n\t// Entries specifies entries to be saved to stable storage BEFORE\n\t// Messages are sent.\n\tEntries []pb.Entry <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n\n\t// Snapshot specifies the snapshot to be saved to stable storage.\n\tSnapshot pb.Snapshot <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n\n\t// CommittedEntries specifies entries to be committed to a\n\t// store/state-machine. These have previously been committed to stable\n\t// store.\n\tCommittedEntries []pb.Entry <i class=\"conum\" data-value=\"6\"></i><b>(6)</b>\n\n\t// Messages specifies outbound messages to be sent AFTER Entries are\n\t// committed to stable storage.\n\t// If it contains a MsgSnap message, the application MUST report back to raft\n\t// when the snapshot has been received or has failed by calling ReportSnapshot.\n\tMessages []pb.Message <i class=\"conum\" data-value=\"7\"></i><b>(7)</b>\n\n\t// MustSync indicates whether the HardState and Entries must be synchronously\n\t// written to disk or if an asynchronous write is permissible.\n\tMustSync bool\nc</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>包含 leader id 和节点状态，易失，无需保存；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>包含任期、任期内的投票以及 commit index，需要在发送 Messages 前保存到 storage；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>当应用的索引大于 ReadState 中的索引时，可用于线性读；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>需要在发送 Messages 前保存到 storage；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td>快照，需要保存到 storage；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"6\"></i><b>6</b></td>\n<td>已被提交到状态机的条目；</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"7\"></i><b>7</b></td>\n<td>在 Entries 被保存到 storage 后，需要将 Messages 发送出去。</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_ready_处理\">Ready 处理</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>持久化 <code>ready.Snapshot</code> (类型 <code>raftpb.Snapshot</code>)：</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>持久化快照本身 <code>raftpb.Snapshot</code>；</p>\n</li>\n<li>\n<p>持久化快照相关的预写日志 <code>walpb.Snapshot</code>(内容根据从 <code>snap.Metadata</code> 获取);</p>\n<div class=\"paragraph\">\n<p>这使得快照文件可能单独存在，但可以防止预写日志条目没有对应的快照文件（启动时先读预写日志后读快照，再根据快照读预写）。</p>\n</div>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>持久化预写日志包括 <code>ready.HardState</code> 和 <code>ready.Entries</code>：</p>\n<div class=\"listingblock\">\n<div class=\"title\">raftpb.HardState</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type HardState struct {\n\tTerm   uint64\n\tVote   uint64\n\tCommit uint64\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">raftpb.Entry</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type Entry struct {\n\tTerm  uint64\n\tIndex uint64\n\tType  EntryType\n\tData  []byte\n}</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>将快照 <code>ready.Snapshot</code> 应用到 <code>raft.MemoryStorage</code>；</p>\n</li>\n<li>\n<p>将快照 <code>ready.Snapshot</code> 发布 (使用 channel 通知 kvstore 从快照恢复数据)；</p>\n</li>\n<li>\n<p>将 <code>ready.Entries</code> 追加到 <code>raft.MemoryStorage</code>；</p>\n</li>\n<li>\n<p>发送 <code>ready.Messages</code> 到其他节点, 可根据 MessageType 将快照和其他类型数据用不同的方式发送到 <code>To</code> 指定的目标：</p>\n<div class=\"listingblock\">\n<div class=\"title\">raftpb.Message</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type Message struct {\n\tType MessageType\n\tTo   uint64\n\tFrom uint64\n\tTerm uint64\n\tLogTerm uint64\n\tIndex   uint64\n\tEntries []Entry\n\tCommit  uint64\n\tSnapshot   *Snapshot\n\tReject     bool\n\tRejectHint uint64\n\tContext    []byte\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">raftpb.MessageType</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type MessageType int32\n\nconst (\n\tMsgHup            MessageType = 0\n\tMsgBeat           MessageType = 1\n\tMsgProp           MessageType = 2\n\tMsgApp            MessageType = 3\n\tMsgAppResp        MessageType = 4\n\tMsgVote           MessageType = 5\n\tMsgVoteResp       MessageType = 6\n\tMsgSnap           MessageType = 7\n\tMsgHeartbeat      MessageType = 8\n\tMsgHeartbeatResp  MessageType = 9\n\tMsgUnreachable    MessageType = 10\n\tMsgSnapStatus     MessageType = 11\n\tMsgCheckQuorum    MessageType = 12\n\tMsgTransferLeader MessageType = 13\n\tMsgTimeoutNow     MessageType = 14\n\tMsgReadIndex      MessageType = 15\n\tMsgReadIndexResp  MessageType = 16\n\tMsgPreVote        MessageType = 17\n\tMsgPreVoteResp    MessageType = 18\n)</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>如果消息类型为 <code>MsgSnap</code> 则需要在消息发送完成后调用 <code>Node.ReportSnapshot()</code></p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>将已提交的条目 <code>ready.CommittedEntries</code>(类型 <code>raftpb.Entry</code>)发布 ，需要根据类型进行处理：</p>\n<div class=\"listingblock\">\n<div class=\"title\">raftpb.EntryType</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type EntryType int32\n\nconst (\n\tEntryNormal       EntryType = 0\n\tEntryConfChange   EntryType = 1\n\tEntryConfChangeV2 EntryType = 2\n)</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>EntryNormal</code> 普通日志条目，通过 channel 发送给 kvstore；</p>\n</li>\n<li>\n<p><code>EntryConfChange</code> 配置变更，通过 <code>raft.ApplyConfChange()</code> 应用变更，再根据配置变更类型增加、更新、或删除节点：</p>\n<div class=\"listingblock\">\n<div class=\"title\">raftpb.ConfChangeType</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type ConfChangeType int32\n\nconst (\n\tConfChangeAddNode        ConfChangeType = 0\n\tConfChangeRemoveNode     ConfChangeType = 1\n\tConfChangeUpdateNode     ConfChangeType = 2\n\tConfChangeAddLearnerNode ConfChangeType = 3\n)</code></pre>\n</div>\n</div>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>调用 <code>node.Advance()</code>，节点可调用下一个 <code>node.Read()</code></p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_propose\">Propose</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>提案包括两种：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>普通提案 <code>node.Propose()</code></p>\n</li>\n<li>\n<p>配置变更提案 <code>node.ProposeConfChange()</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Go etcd/raft 基本使用"},"pageAttributes":{"slug":"distribution-etcd-raft","category":"distribution"},"revision":{"date":"2023-03-25","number":"1.0"}}},"pageContext":{"id":"71ecd9e6-4150-5443-9ec1-562f19a95fee","pageAttributes__slug":"distribution-etcd-raft","__params":{"pageAttributes__slug":"distribution-etcd-raft"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}