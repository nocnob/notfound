{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/go-database-json/","result":{"data":{"asciidoc":{"id":"bb2c94c7-41f3-586d-859f-8653e20b30a4","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>环境：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Ubuntu 22.04</p>\n</li>\n<li>\n<p>Go 1.18.3</p>\n</li>\n<li>\n<p>PostgreSQL 14.4</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_驱动\"><a class=\"anchor\" href=\"#_驱动\"></a>驱动</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>驱动 <a href=\"https://github.com/jackc/pgx\">pgx</a> 可以将 struct 直接转换为 JSONB，但 <a href=\"http://github.com/lib/pq\">pq</a> 并不直接支持。这里我们使用 pq 进行测试。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">go get \"github.com/lib/pq\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>手动转换的过程有些繁琐：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>插入数据：使用 <code>json.Marshal</code> 将 struct 数据转换为 <code>[]byte</code>，然后传送给驱动进行处理。也就是通过 <code>db.ExecContext</code> 等方法传参时，只能使用 <code>[]byte</code> 类型，而无法直接使用 struct 数据本身</p>\n</li>\n<li>\n<p>查询数据：查询获取到 <code>[]byte</code> 类型的 JSON 数据，然后使用 <code>json.Unmarshal</code> 数据转换为 struct。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>通过实现 <a href=\"https://pkg.go.dev/database/sql#Scanner\">Scanner</a> 和 <a href=\"https://pkg.go.dev/database/sql/driver#Valuer\">Valuer</a> 两个和转换相关的接口，可以简化整个过程。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_创建数据库和表\"><a class=\"anchor\" href=\"#_创建数据库和表\"></a>创建数据库和表</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-sql\" data-lang=\"sql\">-- sudo su - postgres -c psql\nCREATE ROLE notfound LOGIN PASSWORD 'YOUR_PASSWORD';\nCREATE DATABASE example_db WITH OWNER = notfound;\n\n-- psql -h 127.0.0.1 -U notfound -d example_db\nCREATE TABLE queues (\n    id BIGSERIAL PRIMARY KEY,\n    name CHARACTER VARYING(255) NOT NULL DEFAULT 'default',\n    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now(), <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now(),\n    payload JSONB NOT NULL <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n);</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>时间类型</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>JSONB</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_直接测试\"><a class=\"anchor\" href=\"#_直接测试\"></a>直接测试</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>数据库中表 <code>queues</code> 对应 Go 中类型 <code>Queue</code></p>\n</li>\n<li>\n<p>数据库中 <code>queues.payload</code> JSONB 对应 Go 中自定类型 <code>Payload</code></p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-go\" data-lang=\"go\">type Queue struct {\n\tID        *int64     `json:\"id\"`\n\tCreatedAt *time.Time `json:\"createdAt\"` <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tUpdatedAt *time.Time `json:\"updatedAt\"`\n\tName      *string    `json:\"name\"`\n\tPayload   *Payload   `json:\"payload\"` <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n}\n\ntype Payload struct { <i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\n\tID        int       `json:\"id\"`\n\tCreatedAt time.Time `json:\"createdAt\"`\n\tArg       string    `json:\"arg\"`\n}\n\nfunc main() {\n\tctx := context.Background()\n\n\t// postgres://notfound:YOUR_PASSWORD@127.0.0.1:5432/example_db\n\tdb, err := sql.Open(\"postgres\", os.Getenv(\"DATABASE_URL\"))\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tdefer db.Close()\n\n    <i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\n\tname := \"default\"\n\tnewQueue := Queue{Name: &amp;name, Payload: &amp;Payload{ID: 1, CreatedAt: time.Now(), Arg: \"arg\"}}\n\ttag, err := db.ExecContext(ctx, \"INSERT INTO queues(name, payload) VALUES($1, $2)\", newQueue.Name, newQueue.Payload)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tif rows, err := tag.RowsAffected(); err == nil {\n\t\tlog.Printf(\"rows affected: %d\", rows)\n\t}\n\n    <i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\n\tvar queue Queue\n\terr = db.QueryRowContext(ctx, \"SELECT id, created_at, updated_at, name, payload FROM queues ORDER BY id desc limit 1\").\n\t\tScan(&amp;queue.ID, &amp;queue.CreatedAt, &amp;queue.UpdatedAt, &amp;queue.Name, &amp;queue.Payload)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tresult, err := json.Marshal(queue)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tlog.Printf(\"%s\\n\", result)\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>时间类型，pq 可以自动转换</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>自定义类型 <code>Payload</code> 与数据库类型 JSONB 对应，无法直接转换</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>自定义类型 <code>Payload</code></td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td>查询数据</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>直接运行程序，会发现报错：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">go run main.go\n# 2022/07/03 21:42:02 sql: converting argument $2 type: unsupported type main.Payload, a struct\n# exit status 1</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>无法转换 Payload 类型。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_valuer_接口\"><a class=\"anchor\" href=\"#_valuer_接口\"></a>Valuer 接口</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>接口 <a href=\"https://pkg.go.dev/database/sql/driver#Valuer\">Valuer</a> 将 Go 类型转换为驱动使用的类型。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">func (p Payload) Value() (driver.Value, error) {\n\treturn json.Marshal(p) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>将 struct 数据转换为 <code>[]byte</code> 类型的 JSON 格式数据，再由驱动将其保存为 JSONB</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>执行程序，发现数据可以插入成功，但查询失败：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">go run main.go\n# 2022/07/03 22:17:19 rows affected: 1\n# 2022/07/03 22:17:19 sql: Scan error on column index 4, name \"payload\": unsupported Scan, storing driver.Value type []uint8 into type *main.Payload\n# exit status 1</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_scanner_接口\"><a class=\"anchor\" href=\"#_scanner_接口\"></a>Scanner 接口</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>接口 <a href=\"https://pkg.go.dev/database/sql#Scanner\">Scanner</a> 将数据中的类型转换为 Go 类型</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">func (p *Payload) Scan(src interface{}) error {\n\tif src == nil {\n\t\treturn nil\n\t}\n\n\tvalue, ok := src.([]byte) <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n\tif !ok {\n\t\treturn fmt.Errorf(\"invalid type\")\n\t}\n\n\treturn json.Unmarshal(value, &amp;p) <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>数据库类型 JSONB 由驱动读取后，保存为 <code>[]byte</code>，是 JSON 格式数据</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>将 JSON 数据转换为 Go 中的 <code>Payload</code> 类型数据</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>运行，Payload 可以插入和查询：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">go run main.go\n# 2022/07/03 22:18:14 rows affected: 1\n# 2022/07/03 22:18:14 {\"id\":4,\"createdAt\":\"2022-07-03T22:18:14.416658Z\",\"updatedAt\":\"2022-07-03T22:18:14.416658Z\",\"name\":\"default\",\"payload\":{\"id\":1,\"createdAt\":\"2022-07-03T22:18:14.409508298+08:00\",\"arg\":\"arg\"}}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\"><a class=\"anchor\" href=\"#_参考\"></a>参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/jackc/pgtype\" class=\"bare\">https://github.com/jackc/pgtype</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Go PostgreSQL 支持 JSONB"},"pageAttributes":{"slug":"go-database-json","category":"go"},"revision":{"date":"2022-07-03","number":"1.0"}}},"pageContext":{"id":"bb2c94c7-41f3-586d-859f-8653e20b30a4","pageAttributes__slug":"go-database-json","__params":{"pageAttributes__slug":"go-database-json"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}