{"componentChunkName":"component---src-pages-posts-asciidoc-page-attributes-slug-tsx","path":"/posts/gatsby-asciidoc-plantuml/","result":{"data":{"asciidoc":{"id":"109fad05-90eb-509d-859f-08abc68a432a","html":"<div class=\"sect1\">\n<h2 id=\"_前端方案\"><a class=\"anchor\" href=\"#_前端方案\"></a>前端方案</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>GET</p>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>将 plantuml 文本转化为 URL 中的参数：</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>Deflate 算法压缩</p>\n</li>\n<li>\n<p>类 base64 编码</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>将编码后内容作为参数添加到 URL 中，向 URL 发送 GET 请求，如 <a href=\"http://www.plantuml.com/plantuml/svg/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000\" class=\"bare\">http://www.plantuml.com/plantuml/svg/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000</a></p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>POST</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">curl -X POST http://localhost:8080/svg \\\n     --header \"Content-Type: text/plain\" \\\n     --data-raw $'@startuml\\nBob -&gt; Alice : hello\\n@enduml'</code></pre>\n</div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>官方提供的 <a href=\"https://www.plantuml.com/plantuml\">在线服务</a> 支持通过 GET 请求处理图片，plantuml 文本需要通过压缩和编码作为参数添加到 URL 中，</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_get\"><a class=\"anchor\" href=\"#_get\"></a>GET</h3>\n<div class=\"paragraph\">\n<p>官方服务支持 GET。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ts\" data-lang=\"ts\">const Template = (props: PageProps&lt;Queries.PostQuery&gt;) =&gt; {\n  const post = props.data.asciidoc;\n  const [html, setHtml] = React.useState&lt;string&gt;(\"\");\n\n  React.useEffect(() =&gt; {\n    if (!post?.html) return;\n\n    const doc = new DOMParser().parseFromString(post.html, \"text/html\");\n    doc.querySelectorAll(\"pre.highlight &gt; code\").forEach(function (el) {\n      const lang = el.getAttribute(\"data-lang\");\n      if (!lang) return;\n      if (lang !== \"plantuml\") return;\n\n      <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n      const str = plantUMLEncode64(\n        deflate(new TextEncoder().encode(el.textContent || \"\"))\n      );\n      const img = document.createElement(\"img\");\n      img.classList.add(lang);\n      <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n      img.src = `https://www.plantuml.com/plantuml/svg/${str}`;\n      el.parentElement?.replaceWith(img);\n      setHtml(doc.body.innerHTML);\n    });\n  }, [post?.html]);\n\n  return (\n    &lt;article className=\"post\"&gt;\n      &lt;div dangerouslySetInnerHTML={{ __html: html }} /&gt;\n    &lt;/article&gt;\n  );\n};</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>plantuml 文本压缩并编码，可以使用 <a href=\"https://www.npmjs.com/package/deflate-js\">deflate-js</a> 压缩，示例代码 <a href=\"https://plantuml.com/zh/code-javascript-synchronous\">编码</a></td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>将处理好的参数拼接到 URL 中</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_post\"><a class=\"anchor\" href=\"#_post\"></a>POST</h3>\n<div class=\"paragraph\">\n<p>官方服务不支持 POST，需要自建 PlantUML Server。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-ts\" data-lang=\"ts\">const Template = (props: PageProps&lt;Queries.PostQuery&gt;) =&gt; {\n  const post = props.data.asciidoc;\n  const [html, setHtml] = React.useState&lt;string&gt;(\"\");\n\n  React.useEffect(() =&gt; {\n    if (!post?.html) return;\n\n    const doc = new DOMParser().parseFromString(post.html, \"text/html\");\n    doc.querySelectorAll(\"pre.highlight &gt; code\").forEach(function (el) {\n      const lang = el.getAttribute(\"data-lang\");\n      if (lang !== \"plantuml\") return;\n\n      <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\n      fetch(plantUMLURL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"text/plain\" },\n        body: el.textContent,\n      })\n        .then((response) =&gt; {\n          if (!response.ok) throw new Error(response.statusText);\n          return response.blob();\n        })\n        .then((blob) =&gt; {\n          <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n          const img = document.createElement(\"img\");\n          img.classList.add(lang)\n          img.src = URL.createObjectURL(blob);\n          el.parentElement?.replaceWith(img);\n          setHtml(doc.body.innerHTML);\n        });\n    });\n  }, [post?.html]);\n\n  return (\n    &lt;article className=\"post\"&gt;\n      &lt;div dangerouslySetInnerHTML={{ __html: html }} /&gt;\n    &lt;/article&gt;\n  );\n};\n\nexport default Template;</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>向服务发送 POST 请求</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>添加 img 节点</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_搭建_plantuml_服务\"><a class=\"anchor\" href=\"#_搭建_plantuml_服务\"></a>搭建 plantuml 服务</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>两种类型：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>picoweb： 仅支持 GET</p>\n</li>\n<li>\n<p><a href=\"https://github.com/plantuml/plantuml-server\">plantuml-server</a> 支持 GET 和 POST</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Docker 部署</p>\n</li>\n<li>\n<p>War 部署</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_picoweb\"><a class=\"anchor\" href=\"#_picoweb\"></a>picoweb</h3>\n<div class=\"paragraph\">\n<p>picoweb 仅支持 GET</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\nwget https://github.com/plantuml/plantuml/releases/download/v1.2022.5/plantuml-1.2022.5.jar\n<i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\njava -jar plantuml-1.2022.5.jar -picoweb</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>下载</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>启动 picoweb</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_docker\"><a class=\"anchor\" href=\"#_docker\"></a>Docker</h3>\n<div class=\"paragraph\">\n<p>直接通过官方镜像启动服务：</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">docker run -d -p 8080:8080 plantuml/plantuml-server:jetty</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_jetty\"><a class=\"anchor\" href=\"#_jetty\"></a>jetty</h3>\n<div class=\"paragraph\">\n<p>通过 jetty 方式部署 plantuml。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">#!/bin/bash\n\nUSER_ID=$(id -u)\nGROUP_ID=$(id -g)\n\nexport JETTY_HOME=/opt/jetty-home <i class=\"conum\" data-value=\"1\"></i><b>(1)</b>\nexport JETTY_BASE=/opt/jetty-base <i class=\"conum\" data-value=\"2\"></i><b>(2)</b>\n\n<i class=\"conum\" data-value=\"3\"></i><b>(3)</b>\nwget https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-home/11.0.13/jetty-home-11.0.13.tar.gz\ntar -zxvf jetty-home-11.0.13.tar.gz\nsudo mv jetty-home-11.0.13 $JETTY_HOME\nsudo chown -R root:root $JETTY_HOME\n\n<i class=\"conum\" data-value=\"4\"></i><b>(4)</b>\nsudo mkdir $JETTY_BASE\nsudo chown $USER_ID:$GROUP_ID $JETTY_BASE\ncd $JETTY_BASE\njava -jar $JETTY_HOME/start.jar --add-module=server,http,deploy\njava -jar $JETTY_HOME/start.jar --add-module=demo\n\n<i class=\"conum\" data-value=\"5\"></i><b>(5)</b>\nwget https://github.com/plantuml/plantuml-server/releases/download/v1.2022.14/plantuml-v1.2022.14.war\ncp plantuml-v1.2022.14.war $JETTY_BASE/webapps/ROOT.war\n\n<i class=\"conum\" data-value=\"6\"></i><b>(6)</b>\njava -jar $JETTY_HOME/start.jar</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<table>\n<tr>\n<td><i class=\"conum\" data-value=\"1\"></i><b>1</b></td>\n<td>jetty 服务目录</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"2\"></i><b>2</b></td>\n<td>plantuml 服务目录</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"3\"></i><b>3</b></td>\n<td>下载、安装 jetty 服务</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"4\"></i><b>4</b></td>\n<td>配置 jetty 服务</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"5\"></i><b>5</b></td>\n<td>配置 plantuml</td>\n</tr>\n<tr>\n<td><i class=\"conum\" data-value=\"6\"></i><b>6</b></td>\n<td>在 JETTY_BASE 目录中启动服务</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>默认端口号为 8080，可通过配置文件 <code>$JETTY_BASE/start.d/http.ini</code> 中 <code>jetty.http.port</code> 修改。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_systemd\"><a class=\"anchor\" href=\"#_systemd\"></a>systemd</h3>\n<div class=\"paragraph\">\n<p>使用 systemd 管理 jetty 服务</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">/lib/systemd/system/jetty.service</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-systemd\" data-lang=\"systemd\">[Unit]\nDescription=Jetty plantuml server\n\n[Service]\nExecStart=java -jar /opt/jetty-home/start.jar\nWorkingDirectory=/opt/jetty-base/\nUser=notfound\nGroup=notfound</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_访问\"><a class=\"anchor\" href=\"#_访问\"></a>访问</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>通过 <a href=\"http://localhost:8080\" class=\"bare\">http://localhost:8080</a> 可以访问 plantuml 页面。</p>\n</div>\n<div class=\"paragraph\">\n<p>可通过 GET 或者 POST 方式获取生成的结果：</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>GET:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">curl http://localhost:8080/svg/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>POST:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">curl -X POST http://localhost:8080/svg \\\n     --header \"Content-Type: text/plain\" \\\n     --data-raw $'@startuml\\nBob -&gt; Alice : hello\\n@enduml'</code></pre>\n</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_后端方案\"><a class=\"anchor\" href=\"#_后端方案\"></a>后端方案</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://www.gatsbyjs.com/plugins/gatsby-transformer-asciidoc/#define-a-custom-converter\">通过自定义 Converter</a>在处理代码相关 node 时进行语法高亮。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_参考\"><a class=\"anchor\" href=\"#_参考\"></a>参考</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://www.eclipse.org/jetty/documentation/jetty-11/operations-guide/index.html#og-begin\" class=\"bare\">https://www.eclipse.org/jetty/documentation/jetty-11/operations-guide/index.html#og-begin</a></p>\n</li>\n<li>\n<p><a href=\"https://plantuml.com/zh/code-javascript-asynchronous\" class=\"bare\">https://plantuml.com/zh/code-javascript-asynchronous</a></p>\n</li>\n<li>\n<p><a href=\"https://plantuml.com/zh/picoweb\" class=\"bare\">https://plantuml.com/zh/picoweb</a></p>\n</li>\n<li>\n<p><a href=\"https://plantuml.com/zh/text-encoding\" class=\"bare\">https://plantuml.com/zh/text-encoding</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"gatsby + asciidoc: 添加 plantuml 支持"},"pageAttributes":{"slug":"gatsby-asciidoc-plantuml","category":"blog"},"revision":{"date":"2022-06-12","number":"1.0"}}},"pageContext":{"id":"109fad05-90eb-509d-859f-08abc68a432a","pageAttributes__slug":"gatsby-asciidoc-plantuml","__params":{"pageAttributes__slug":"gatsby-asciidoc-plantuml"}}},"staticQueryHashes":["3143286284"],"slicesMap":{}}